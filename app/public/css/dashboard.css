.dashboard .menu_container .menu {
  width: 70%; }

.dashboard .menu_container .pull_right {
  display: none; }

/*# sourceMappingURL=data:application/json;base64,{"version":3,"file":"dashboard.css","sources":["dashboard.scss","../base/_variables.scss"],"sourcesContent":["@import \"../base/_variables.scss\";\n\n//mark the body with class name \"dashboard\"\n.dashboard{ \n\t& .menu_container{\n\t\t.menu{\n\t\t\twidth: 70%;\n\t\t}\n\t\t.pull_right{\n\t\t\tdisplay:none;\n\t\t}\n\t}\n}","//variable naming rule ==============>TODO\n//$Description-css_style_name\n\n// Variables\n\n// == Colors ==============================\n//\n//## Define all the colors here\n\n//Define a variable to contain all main colors to\n//generate the class dynamically\n$colors:\n\"pri_cl\" #6BB4AD,\n\"pri_light_cl\" #8DD4CD,\n\"pri_dark_cl\" #498D86,\n\"sec_cl\" #D95161,\n\"sec_dark_cl\" #BC414F,\n\"grayscale_cl\" #929292,\n\"grayscale_light_cl\" #DBD9D8,\n\"grayscale_md_cl\" #5F5E5E,\n\"grayscale_dark_cl\" #4B4B4B,\n\"base_white\" #ffffff;\n\n\n$pri_cl:    \t    \t#6BB4AD;  //primary color\n$pri_light_cl:      \t#8DD4CD;\n$pri_dark_cl:       \t#498D86;\n\n\n$sec_cl:\t\t\t\t#D95161;\n$sec_dark_cl:       \t#BC414F; \n\n$third_cl:  #599993;\n\n$grayscale_cl:\t\t\t#929292;\n$grayscale_light_cl:\t#DBD9D8;\n$grayscale_dark_cl: \t#4B4B4B;\n$grayscale_md_cl:       #5F5E5E;\n$base_white: \t\t\t#ffffff;\n$tag_bg:\t\t\t\t#d0cdcb;\n\n\n$profile_edit_title_color: #DDDFDE;\n\n\n//== Scaffolding ============================== \n//\n//## Setting for global styles\n\n//** Background color for `<body>`.\n$body_bg:               #F5F3F2;\n//** Global text color on `<body>`.\n$text_color:            $grayscale_dark_cl;\n\n$remind_text_color:\t\t$sec_cl;\n\n\n//** Global textual link color.\n$link_color:            $pri_cl;\n//** Link hover color set via `darken()` function.\n$link_hover_color:      #599993;\n//** Link hover decoration.\n$link_hover_decoration: ;\n\n\n\n\n//== Typography ==============================\n//\n//## Font, line-height, and color for body text, headings, and more.\n//** Default monospace fonts for `<code>`, `<kbd>`, and `<pre>`.\n\n$base_font_family:       'Avenir',Helvetica, Arial, sans-serif !default;\n$base_font_weight:\t\t 500; // normal\n$base_font_weight_bold:   600;\n$lnr_font:'Linearicons-Free';\n\n\n$base_font_size:\t\t\t16px;\n$base_input_font_size:\t\tceil(($base_font_size * 0.875)) !default; // ~14px\n$base_input_label_font_size: 16px;\n$large_font_size:         \tceil(($base_font_size * 1.25)) !default; // ~18px\n$small_font_size:         \tceil(($base_font_size * 0.85)) !default; // ~12px\n\n\n$xxlg_font: 48px;\n$xlg_font: 36px;\n$lg_font: 28px;\n$md_font:20px;\n$rg_font:18px;\n$rgs_font:16px;\n$sm_font:14px;\n$xs_font:12px;\n\n$h1_font_size:            floor(($base_font_size * 2.25)) !default; // ~36px\n$h2_font_size:            floor(($base_font_size * 1.75)) !default; // ~28px\n$h3_font_size:            ceil(($base_font_size * 1.25)) !default; // ~20px\n$h4_font_size:\t\t\t  $base_font_size !default;\n$h5_font_size:            ;\n$h6_font_size:            ; // ~12px\n\n\n\n\n// //** Unit-less `line-height` for use in components like buttons.\n$base_line_height:        22 / 16 !default; // 20/14\n// //** Computed \"line-height\" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.\n// $line-height-computed:    floor(($base-font-size * $line-height-base)) !default; // ~20px\n\n//******** Don't uncomment above line temporarily because it will cause error ********************\n\n\n//========== Components ==============================\n//\n//## Define common padding and border radius sizes and more. Values based on 14px text and 1.428 line-height (~20px to start).\n\n$base_padding_vertical:     15px;\n$base_padding_horizontal:   15px;\n\n$large_padding_vertical:    ;\n$large_padding_horizontal:  ;\n\n$small_padding_vertical:    ;\n$small_padding_horizontal:  ;\n\n$xs_padding_vertical:       ;\n$xs_padding_horizontal:     ;\n\n$large_line_height:         ;\n$small_line_height:         ;\n\n$base_border_radius:        5px;\n$large_border_radius:       ;\n$small_border_radius:       ;\n\n//** Global color for active items (e.g., navs or dropdowns).\n$component_active_color:    ;\n//** Global background color for active items (e.g., navs or dropdowns).\n$component_active_bg:       ;;\n\n\n// ================================ Buttons ==============================\n//\n//## For each of Bootstrap's buttons, define text, background and border color.\n\n$btn_font_weight:           bold !default;\n\n$btn_pri_height:\t\t\t50px;\n$btn_pri_color:\t\t\t\t$pri_cl;\n\n$btn_sec_height:\t\t\t31px;\n$btn_sec_color:\t\t\t\t$sec_cl;\n\n$btn_link_disabled_color:        ;\n\n// Allows for customizing button radius independently from global border radius\n$btn_border_radius_base:         5px;\n$btn_border_radius_large:        ;\n$btn_border_radius_small:        ;\n\n$btn_base_width:204px;\n$btn_base_height:50px;\n$btn_lg_width:;\n$btn_md_width:;\n$btn_sm_width:;\n$btn_xs_width:;\n\n//====== Forms ==============================\n//\n//##\n\n//** `<input>` background color\n$input_bg:                       $base_white;\n//** `<input disabled>` background color\n$input_bg_disabled:              ;\n\n$input_warning_bg:\t\t\t\t#FDF694;\n\n//** Text color for `<input>`s\n$input_color:                    $base_white;\n//** `<input>` border color\n$input_border:                   ;\n\n// TODO: Rename `$input-border-radius` to `$input-border-radius-base` in v4\n//** Default `.form-control` border radius\n// This has no effect on `<select>`s in some browsers, due to the limited stylability of `<select>`s in CSS.\n$input_border_radius:            5px;\n//** Large `.form_control` border radius\n$input_border_radius_large:      ;\n//** Small `.form_control` border radius\n$input_border_radius_small:      ;\n\n$check_box_size_base:\t\t17px; //for both checkbox and radio\n\n//** Border color for inputs on focus\n$input_border_focus:             ;\n//** Placeholder text color\n$input_color_placeholder:        ;\n\n//** Default `.form_control` height\n$input_height_base:              31px;\n//** Large `.form_control` height\n$input_height_large:             ;\n//** Small `.form_control` height\n$input_height_small:             ;\n\n//** `.form_group` margin\n$form_group_margin_bottom:       15px !default;\n\n\n//** Background color for textual input addons\n$input_group_addon_bg:           ;\n//** Border color for textual input addons\n$input_group_addon_border_color: ;\n\n//** Disabled cursor for form controls and buttons.\n$cursor_disabled:                not-allowed !default;\n\n\n\n//== Dropdowns ==============================\n//\n//## Dropdown menu container and contents.\n\n\n$dropdown_base_height: 41px;\n$dropdwon_base_width: 162px;\n//** Background for the dropdown menu.\n$dropdown_bg:                    ;\n//** Dropdown menu `border_color`.\n$dropdown_border:                ;\n//** Dropdown menu `border_color` **for IE8**.\n$dropdown_fallback_border:       ;\n//** Divider color for between dropdown items.\n$dropdown_divider_bg:            ;\n\n//** Dropdown link text color.\n$dropdown_link_color:            ;\n//** Hover color for dropdown links.\n$dropdown_link_hover_color:      ;\n//** Hover background for dropdown links.\n$dropdown_link_hover_bg:         ;\n\n//** Active dropdown menu item text color.\n$dropdown_link_active_color:     ;\n//** Active dropdown menu item background color.\n$dropdown_link_active_bg:        ;\n\n//** Disabled dropdown menu item background color.\n$dropdown_link_disabled_color:   ;\n\n//** Text color for headers within dropdown menus.\n$dropdown_header_color:          ;\n\n//** Deprecated `$dropdown_caret_color` as of v3.1.0\n$dropdown_caret_color:           ;\n\n\n//-- Z-index master list ==============================\n//\n// Warning: Avoid customizing these values. They're used for a bird's eye view\n// of components dependent on the z-axis and are designed to all work together.\n//\n// Note: These variables are not generated into the Customizer.\n\n$zindex_tooltip:           1070 !default;\n$zindex_popover:           1060 !default;\n$zindex_modal:             1050 !default;\n$zindex_modal-background:  1040 !default;\n$zindex_navbar-fixed:      1030 !default;\n$zindex_navbar:            1000 !default;\n$zindex_dropdown:          1000 !default;\n\n\n\n//== Media queries breakpoints ==============================\n//\n//## Define the breakpoints at which your layout will change, adapting to different screen sizes.\n\n// Extra small screen / phone\n//** Deprecated `$screen-xs` as of v3.0.1\n$screen_xs:                  480px !default;\n//** Deprecated `$screen_xs_min` as of v3.2.0\n$screen_xs_min:              $screen_xs !default;\n//** Deprecated `$screen_phone` as of v3.0.1\n$screen_phone:               $screen_xs_min !default;\n\n// Small screen / tablet\n//** Deprecated `$screen_sm` as of v3.0.1\n$screen_sm:                  768px !default;\n$screen_sm_min:              $screen_sm !default;\n//** Deprecated `$screen_tablet` as of v3.0.1\n$screen_tablet:              $screen_sm_min !default;\n\n// Medium screen / desktop\n//** Deprecated `$screen_md` as of v3.0.1\n$screen_md:                  992px !default;\n$screen_md_min:              $screen_md !default;\n//** Deprecated `$screen_desktop` as of v3.0.1\n$screen_desktop:             $screen_md_min !default;\n\n// Large screen / wide desktop\n//** Deprecated `$screen_lg` as of v3.0.1\n$screen_lg:                  1200px !default;\n$screen_lg_min:              $screen_lg !default;\n//** Deprecated `$screen_lg_desktop` as of v3.0.1\n$screen_lg_desktop:          $screen_lg_min !default;\n\n// So media queries don't overlap when required, provide a maximum\n$screen_xs_max:              ($screen_sm_min - 1) !default;\n$screen_sm_max:              ($screen_md_min - 1) !default;\n$screen_md_max:              ($screen_lg_min - 1) !default;\n\n\n//== Grid system ==============================\n//\n//## Define your custom responsive grid.\n\n//** Number of columns in the grid.\n$grid_columns:              12 !default;\n//** Padding between columns. Gets divided in half for the left and right.\n$grid_gutter_width:         30px !default;\n// Navbar collapse\n//** Point at which the navbar becomes uncollapsed.\n$grid_float_breakpoint:     $screen_sm_min !default;\n//** Point at which the navbar begins collapsing.\n$grid_float_breakpoint_max: ($grid_float_breakpoint - 1) !default;\n\n\n\n//== Containers ==============================\n//\n//## Define the max and min of your '.container' for different screen size\n\n// Small screen / tablet\n$container_tablet:             (720px + $grid_gutter_width) !default;\n//** For `$screen-sm-min` and up.\n$container_sm:                 $container_tablet !default;\n\n// Medium screen / desktop\n$container_desktop:            (940px + $grid_gutter_width) !default;\n//** For `$screen_md_min` and up.\n$container_md:                 $container_desktop !default;\n\n// Large screen / wide desktop\n$container_large_desktop:      (1140px + $grid_gutter_width) !default;\n//** For `$screen_lg_min` and up.\n$container_lg:;\n\n\n\n//== header ========================\n$header_height:\t\t\t80px;\n\n\n//== Nav Bar ==============================\n//\n//## As title,the styles of nav bar, like links,label,inverted .etc\n// Basics of a navbar\n\n$navbar_height:\t\t\t\t\t60px;\n$navbar_bg:\t\t\t\t\t\t#5F5E5E;\n$navbar_color:\t\t\t\t\t$base_white;\n$navbar_margin_bottom:             ;\n$navbar_border_radius:             ;\n$navbar_padding_horizontal:        ;\n$navbar_padding_vertical:          ;\n$navbar_collapse_max_height:       ;\n\n\n// Navbar links\n$navbar_default_link_color:                ;\n$navbar_default_link_hover_color:          ;\n$navbar_default_link_hover_bg:             ;\n$navbar_default_link_active_color:         ;\n$navbar_default_link_active_bg:            ;\n$navbar_default_link_disabled_color:       ;\n$navbar_default_link_disabled_bg:          ;\n\n\n\n//== Navs ==============================\n//\n//## Shared nav styles, tabs\n\n$tab_active_cl:\t\t$grayscale_dark_cl;\n$tab_disable_cl:\t#adaaa7;\n\n$nav_link_padding:                          ;\n$nav_link_hover_bg:                         ;\n\n$nav_disabled_link_color:                   ;\n$nav_disabled_link_hover_color:             ;\n\n\n\n\n//== Jumbotron ==============================\n//\n//## paddings for the super large screen like TVs,\n$jumbotron_padding:              ;\n$jumbotron_color:                ;\n$jumbotron_bg:                   ;\n$jumbotron_heading_color:        ;\n$jumbotron_font_size:            ;\n$jumbotron_heading_font_size:    ;\n\n\n\n\n\n//== Form states and feedback messages ==============================\n//\n//## Define colors for form feedback states and, by default, alerts.\n\n$state_success_text:             ;\n$state_success_bg:               ;\n$state_success_border:           ;\n\n$state_info_text:                ;\n$state_info_bg:                  ;\n$state_info_border:              ;\n\n$state_warning_text:             ;\n$state_warning_bg:               ;\n$state_warning_border:           ;\n\n$state_danger_text:              ;\n$state_danger_bg:                ;\n$state_danger_border:            ;\n\n\n\n\n\n\n//== Labels ==============================\n//\n//## \n\n//** Default label background color\n$label_default_bg:            ;\n//** Primary label background color\n$label_primary_bg:            ;\n//** Success label background color\n$label_success_bg:            ;\n//** Info label background color\n$label_info_bg:               ;\n//** Warning label background color\n$label_warning_bg:            ;\n//** Danger label background color\n$label_danger_bg:             ;\n\n//** Default label text color\n$label_color:                 ;\n//** Default text color of a linked label\n$label_link_hover_color:      ;\n\n\n\n\n\n// 280416 Janet Add round corner\n$base_border_radius:5px;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAGA,AAEE,UAFQ,CACP,eAAe,CAChB,KAAK,CAAA;EACJ,KAAK,EAAE,GAAI,GACX;;AAJH,AAKE,UALQ,CACP,eAAe,CAIhB,WAAW,CAAA;EACV,OAAO,EAAC,IAAK,GACb","names":[],"sourceRoot":"/source/"} */
