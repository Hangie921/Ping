.profile {
  font-size: 18px; }
  .profile h1 {
    font-size: 48px;
    text-align: center; }
  .profile h2 {
    font-size: 36px;
    text-align: center; }
  .profile h3 {
    font-size: 36px;
    text-align: center; }
  .profile p {
    font-size: 18px; }

.profile_banner_section {
  height: 360px;
  width: 100%;
  text-align: center;
  overflow: hidden;
  position: relative; }
  .profile_banner_section .profile__name {
    text-shadow: 0px 2px 15px rgba(0, 0, 0, 0.5);
    z-index: 120;
    position: relative;
    margin: 70px auto 0;
    display: block; }
  .profile_banner_section .profile__tagline {
    z-index: 120;
    position: relative;
    margin: 35px auto 0;
    display: block;
    color: rgba(245, 243, 242, 0.8);
    text-shadow: 0px 0px 11px rgba(0, 0, 0, 0.5); }

.banner__inner {
  overflow: hidden;
  min-height: 360px; }

.company_info_section {
  background: #F5F3F2; }

.company_info_section-top {
  position: relative;
  border-bottom: 1px solid #DBD9D8; }
  .company_info_section-top .location {
    position: absolute;
    z-index: 120;
    left: 0;
    top: -50px;
    font-size: 14px;
    line-height: 14px; }
    .company_info_section-top .location .lnr-map-marker:before {
      position: relative;
      font-size: 24px;
      top: 5px; }
  .company_info_section-top .profile__photo {
    position: absolute;
    margin-left: -75px;
    top: -80px;
    left: 50%;
    border: 6px solid #F5F3F2;
    box-sizing: border-box; }
    .company_info_section-top .profile__photo img {
      width: 100%;
      height: 100%;
      object-fit: cover; }

.company_info_section-bottom h4 {
  font-size: 16px;
  color: #599993; }

.company_info_section-bottom .tag_list {
  padding: 5px 0px 40px;
  margin-top: 10px; }

.company__icon__single {
  float: left;
  display: block;
  vertical-align: center; }

.company_tec .tag {
  background-color: #d0cdcb; }

.profile_main_section {
  background: #ffffff;
  font-size: 18px; }

.profile__content:last-of-type {
  padding-bottom: 70px; }

.profile_bottom_banner_section {
  height: 360px;
  position: relative; }

/*# sourceMappingURL=data:application/json;base64, */
