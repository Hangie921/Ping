.profile {
  font-size: 18px; }
  .profile h1 {
    font-size: 48px;
    text-align: center; }
  .profile h2 {
    font-size: 36px;
    text-align: center; }
  .profile h3 {
    font-size: 36px;
    text-align: center; }
  .profile p {
    font-size: 18px; }

.profile_banner_section {
  height: 360px;
  width: 100%;
  text-align: center;
  overflow: hidden;
  position: relative; }
  .profile_banner_section .profile__name {
    text-shadow: 0px 2px 15px rgba(0, 0, 0, 0.5);
    z-index: 120;
    position: relative;
    margin: 70px auto 0;
    display: block; }
  .profile_banner_section .profile__tagline {
    z-index: 120;
    position: relative;
    margin: 35px auto 0;
    display: block;
    color: rgba(245, 243, 242, 0.8);
    text-shadow: 0px 0px 11px rgba(0, 0, 0, 0.5); }

.banner__inner {
  overflow: hidden;
  min-height: 360px; }

.company_info_section {
  background: #F5F3F2; }

.company_info_section-top {
  position: relative;
  border-bottom: 1px solid #DBD9D8; }
  .company_info_section-top .location {
    position: absolute;
    z-index: 120;
    left: 0;
    top: -50px;
    font-size: 14px;
    line-height: 14px; }
    .company_info_section-top .location .lnr-map-marker:before {
      position: relative;
      font-size: 24px;
      top: 5px; }
  .company_info_section-top .profile__photo {
    position: absolute;
    margin-left: -75px;
    top: -80px;
    left: 50%;
    width: 150px;
    height: 150px;
    border: 6px solid #F5F3F2;
    box-sizing: border-box; }
    .company_info_section-top .profile__photo img {
      width: 100%;
      height: 100%;
      object-fit: cover; }

.company_info_section-bottom h4 {
  font-size: 16px;
  color: #599993; }

.company_info_section-bottom .tag_list {
  padding: 5px 0px 40px;
  margin-top: 10px; }

.company__icon__single {
  float: left;
  display: block;
  vertical-align: center; }

.company_tec .tag {
  background-color: #d0cdcb; }

.profile_main_section {
  background: #ffffff;
  font-size: 18px; }

.profile__content:last-of-type {
  padding-bottom: 70px; }

.profile_bottom_banner_section {
  height: 360px;
  position: relative; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5jc3MiLCJzb3VyY2VzIjpbInByb2ZpbGUuc2NzcyIsIi4uL2Jhc2UvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vYmFzZS9fbWl4aW5zLnNjc3MiLCIuLi9iYXNlL21peGlucy9fY2xlYXJmaXguc2NzcyIsIi4uL2Jhc2UvbWl4aW5zL19ncmlkLWZyYW1ld29yay5zY3NzIiwiLi4vYmFzZS9taXhpbnMvX2dyaWQuc2NzcyIsIi4uL2Jhc2UvbWl4aW5zL19yZXNwb25zaXZlLnNjc3MiLCIuLi9iYXNlL21peGlucy9fcHJlZml4LnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCBcIi4uL2Jhc2UvX3ZhcmlhYmxlcy5zY3NzXCI7XG5AaW1wb3J0IFwiLi4vYmFzZS9fbWl4aW5zLnNjc3NcIjtcblxuXG4gICAgICAgIFxuLnByb2ZpbGUge1xuICAgIFxuICAgIGZvbnQtc2l6ZTokcmdfZm9udDtcbiAgICBoMSB7Zm9udC1zaXplOiR4eGxnX2ZvbnQ7dGV4dC1hbGlnbjpjZW50ZXI7fSAvLzQ4cHhcbiAgICBoMiB7Zm9udC1zaXplOiR4bGdfZm9udDt0ZXh0LWFsaWduOmNlbnRlcjt9IC8vMzZweFxuICAgIGgzIHtmb250LXNpemU6JHhsZ19mb250O3RleHQtYWxpZ246Y2VudGVyO30gLy8yOHB4XG4gICAgcCB7Zm9udC1zaXplOiRyZ19mb250O31cbn1cbi8vUHJvZmlsZSBCYW5uZXIgU2VjdGlvblxuLnByb2ZpbGVfYmFubmVyX3NlY3Rpb24ge1xuICAgICAgICAgICAgaGVpZ2h0OiAzNjBweDtcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XG5cbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcblxuICAgICAgICAgICAgJiAucHJvZmlsZV9fbmFtZSB7XG4gICAgICAgICAgICAgICAgdGV4dC1zaGFkb3c6IDBweCAycHggMTVweCByZ2JhKDAsIDAsIDAsIC41KTtcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAxMjA7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNzBweCBhdXRvIDA7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmIC5wcm9maWxlX190YWdsaW5lIHtcbiAgICAgICAgICAgICAgICB6LWluZGV4OjEyMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICBtYXJnaW46MzVweCBhdXRvIDA7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMjQ1LCAyNDMsIDI0MiwgLjgpO1xuICAgICAgICAgICAgICAgIHRleHQtc2hhZG93OiAwcHggMHB4IDExcHggcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4uYmFubmVyX19pbm5lciB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OjM2MHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcbi8vIGVuZCBvZiBCYW5uZXIgU2VjdGlvblxuXG4vL01pZGRsZSBncmF5IGFyZWEgY29tcGFueSBpbmZvIHRvcCBzZWN0aW9uLCBpY29ucywgcHJvZmlsZSBwaWMsIHNvY2lhbCBpY29uc1xuLmNvbXBhbnlfaW5mb19zZWN0aW9uIHtcbiAgICBiYWNrZ3JvdW5kOiRncmF5c2NhbGVfNjtcbn1cbi5jb21wYW55X2luZm9fc2VjdGlvbi10b3Age1xuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICRncmF5c2NhbGVfbGlnaHRfY2w7XG5cbiAgICAubG9jYXRpb24ge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgei1pbmRleDoxMjA7XG4gICAgICAgICAgICBsZWZ0OjA7XG4gICAgICAgICAgICB0b3A6LTUwcHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICAgICAgICAgICYgLmxuci1tYXAtbWFya2VyOmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgICAgICB0b3A6IDVweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgJiAucHJvZmlsZV9fcGhvdG8ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTc1cHg7XG4gICAgICAgICAgICAgICAgdG9wOi04MHB4O1xuICAgICAgICAgICAgICAgIGxlZnQ6NTAlO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxNTBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogNnB4IHNvbGlkICRncmF5c2NhbGVfNjtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgICYgaW1nIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG59Ly8gQ29tcGFueSBUb3AgU2VjdGlvbiBFbmRzXG5cbi8vQ29tcGFueSBpbmZvIHRhZ3Mgc2VjdGlvbnNcbi5jb21wYW55X2luZm9fc2VjdGlvbi1ib3R0b20ge1xuICAgIGg0IHtcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICBjb2xvcjogJHRoaXJkX2NsO1xuICAgICAgIH1cbiAgICAudGFnX2xpc3Qge1xuICAgIHBhZGRpbmc6IDVweCAwcHggNDBweDtcbiAgICBtYXJnaW4tdG9wOiAxMHB4OyAgICAgICAgICAgICAgICAgXG4gICAgfVxufVxuLmNvbXBhbnlfX2ljb25fX3NpbmdsZSB7XG4gICAgZmxvYXQ6bGVmdDtcbiAgICBkaXNwbGF5OmJsb2NrO1xuICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7ICAgICAgICAgICAgICAgICAgXG59XG4uY29tcGFueV90ZWMgeyAgICAgICAgICAgIFxuICAgIC50YWcge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheXNjYWxlXzU7XG4gICAgfVxufVxuLy8gVGFnIFNlY3Rpb24gRW5kc1xuXG5cbi8vPT09PT09PT09PSBQcm9maWxlIE1haW4gQXJlYSA9PT09PT09PT09PT09PT09XG4ucHJvZmlsZV9tYWluX3NlY3Rpb24ge1xuICAgIGJhY2tncm91bmQ6ICRiYXNlX3doaXRlO1xuICAgIGZvbnQtc2l6ZTogJHJnX2ZvbnQ7IC8vMThweFxuICAgIFxufVxuLnByb2ZpbGVfX2NvbnRlbnQge1xuICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206JHNwYWNlX2xnO1xuICAgIH1cbn1cblxuLnByb2ZpbGVfYm90dG9tX2Jhbm5lcl9zZWN0aW9uIHtcbiAgICBoZWlnaHQ6IDM2MHB4O1xuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuXG59XG4vLyA9PT09PT09XG4vLyAgICAgICAgICAgICAmIC5kZXRhaWwge1xuLy8gICAgICAgICAgICAgICAgIHdpZHRoOiAzNSU7XG4vLyAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0OiAxMjBweDtcbi8vICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgcGFkZGluZzogMjZweCAwcHggMjZweCAwcHg7XG4vLyAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbi8vICAgICAgICAgICAgICAgICAubG9jYXRpb24ge1xuLy8gICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLyAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4vLyAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgdG9wOiAtNTNweDtcbi8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgJiAubG5yLW1hcC1tYXJrZXI6YmVmb3JlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogNXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICYgLmRldGFpbHMgdWwgPiBsaSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzMlO1xuLy8gICAgICAgICAgICAgICAgICAgICAmIC5sbnIge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHRoaXJkX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJjpiZWZvcmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDVweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAmIC5kZXRhaWxfY29udGVudCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZ3JheXNjYWxlX2RhcmtfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9IC8vZW5kIG9mIHRoZSAuZGV0YWlsXG4vLyAgICAgICAgICAgICAmIC5zb2NpYWxfaWNvbnMge1xuLy8gICAgICAgICAgICAgICAgIHdpZHRoOiAzNSU7XG4vLyAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0OiAxMjBweDtcbi8vICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyNnB4IDBweCAyNnB4IDBweDtcbi8vICAgICAgICAgICAgICAgICAmIHVsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4vLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxcHg7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICYgbGkge1xuLy8gICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzVweDtcbi8vICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzNXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgJiAuZmEge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMzVweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjRkVGRUZFO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzU0N0JCQztcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAmOm50aC1jaGlsZCgyKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzhDQkVGO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDMpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxNDg1Qzc7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0QTkwRTI7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICYgaHIge1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbi8vICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGdyYXlzY2FsZV9saWdodF9jbDtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICYgLmN1bHR1cmUsXG4vLyAgICAgICAgICAgICAmIC50ZWMge1xuLy8gICAgICAgICAgICAgICAgICYgLnRpdGxlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHRoaXJkX2NsO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAmIHVsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDBweCA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAmIC50YWcge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjZweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMXB4IDIwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDhweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgd2lkdGg6IDUwJTtcbi8vICAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogMTVweDtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICYgLnRlYyB7XG4vLyAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuLy8gICAgICAgICAgICAgICAgIC50YWcge1xuLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFnX2JnO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSAvL2VuZCBvZiB0aGUgLmNvbXBfaW5mb1xuLy8gICAgICAgICAuY29tcGFueV9pbnN0cm8ge1xuLy8gICAgICAgICAgICAgJiAuY29udGFpbmVyID4gZGl2IHtcbi8vICAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbi8vICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDBweDtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICYgLnRleHQge1xuLy8gICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFweDtcbi8vICAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbi8vICAgICAgICAgICAgICAgICBoMiB7XG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIGRpc3BsYXk6aW5saW5lLWJsb2NrO1xuLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4vLyAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA4MCU7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDcwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDM1cHg7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIHAge1xuLy8gICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICYgLmxpc3Qge1xuLy8gICAgICAgICAgICAgICAgIC5pdGVtIHtcbi8vICAgICAgICAgICAgICAgICAgICAgc3BhbiB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgLmxuciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkdGhpcmRfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAmIC5xdW90YXRpb24ge1xuLy8gICAgICAgICAgICAgICAgIC5xdW90ZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnQXZlbmlyLUJsYWNrT2JsaXF1ZSc7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc3R5bGU6IG9ibGlxdWU7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbi8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRncmF5c2NhbGVfZGFya19jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiAwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCAwcHggMnB4IDExcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogM3B4IHNvbGlkICRwcmlfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgICY6YmVmb3JlLFxuLy8gICAgICAgICAgICAgICAgICAgICAmOmFmdGVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiIOKAnSBcIjtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOjk4cHg7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9IC8vZW5kIG9mIHRoZSAuY29tcGFueV9pbnN0cm9cbi8vICAgICAgICAgLmJvdHRvbV9iYW5uZXIge1xuLy8gICAgICAgICAgICAgaGVpZ2h0OiAzNjBweDtcbi8vICAgICAgICAgICAgIEBpbmNsdWRlIHByZWZpeCgoIGJhY2tncm91bmQ6IHVybCguLi8uLi9pbWcvcHJvZmlsZV9pbWcvYm90dG9tX2ltYWdlLmpwZykgbm8tcmVwZWF0KSwgbW96KTtcbi8vICAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4vLyAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuLy8gICAgICAgICB9XG4vLyAgICAgfSAvLyBlbmQgb2YgdGhlIC52aWV3IGNsYXNzXG4vLyAgICAgLy8vPT09PT09PT09PT09PT09PSBTdGFydCB0aGUgLmVkaXQgbW9kZSA9PT09PT09PT09PT09PT09PVxuLy8gICAgICYuZWRpdCB7XG4vLyAgICAgICAgIC8vIFRvIG1hcmsgdGhlIHBhZ2UgYXMgZWRpdCBtb2RlZlxuLy8gICAgICAgICAuYnRuLmNhbmNlbCB7XG4vLyAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheXNjYWxlX2NsO1xuLy8gICAgICAgICAgICAgY29sb3I6ICRiYXNlX3doaXRlO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIC5zaWRlX2JhciB7XG4vLyAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4vLyAgICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbi8vICAgICAgICAgICAgIC5tZW51IHtcbi8vICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFzZV93aGl0ZTtcbi8vICAgICAgICAgICAgICAgICBoZWlnaHQ6IGF1dG87XG4vLyAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgLm1lbnVfaXRlbSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZV9mb250X2ZhbWlseTtcbi8vICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1M3B4O1xuLy8gICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogNTNweDtcbi8vICAgICAgICAgICAgICAgICAgICAgJiAubG5yIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDI1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDE3cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJGxucl9mb250O1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICYgYSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGdyYXlzY2FsZV9kYXJrX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxN3B4IDMwcHggMTdweCA1MnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIgYSxcbi8vICAgICAgICAgICAgICAgICAgICAgJi5mb2N1cyBhIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYmFzZV93aGl0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmlfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIgLmxucixcbi8vICAgICAgICAgICAgICAgICAgICAgJi5mb2N1cyAubG5yIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYmFzZV93aGl0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAvLyAubWVudV9pdGVtLmZvY3VzIGEsLm1lbnVfaXRlbS5mb2N1czpiZWZvcmV7XG4vLyAgICAgICAgICAgICAgICAgLy8gICAgIGNvbG9yOiAkYmFzZV93aGl0ZTtcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaV9jbDtcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbi8vICAgICAgICAgICAgICAgICAvLyB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gLy9lbmQgb2YgdGhlIHNpZGVfYmFyXG4vLyAgICAgICAgIC5jb250ZW50X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgaDIge1xuLy8gICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHByb2ZpbGVfaDJfZm9udF9zaXplO1xuLy8gICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZV9mb250X2ZhbWlseTtcbi8vICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xuLy8gICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDBweCAzM3B4IDQxcHg7XG4vLyAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4ICRiYXNlX2JvcmRlcl9yYWRpdXMgJGJhc2VfYm9yZGVyX3JhZGl1cyAwcHhcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIC50aXRsZSB7XG4vLyAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuLy8gICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZV9mb250X2ZhbWlseTtcbi8vICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xuLy8gICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRwcm9maWxlX2VkaXRfdGl0bGVfY29sb3I7XG4vLyAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4vLyAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA3NnB4O1xuLy8gICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDBweCAkYmFzZV9ib3JkZXJfcmFkaXVzICRiYXNlX2JvcmRlcl9yYWRpdXMgMHB4O1xuLy8gICAgICAgICAgICAgICAgICYgaDMge31cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIC5lZGl0X3NlY3Rpb24ge1xuLy8gICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxcHg7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAucHJvZmlsZV9zZXR0aW5nIHtcbi8vICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogMzAwcHg7XG4vLyAgICAgICAgICAgICAgICAgLnRpdGxlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgJiBhIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYgLnJlbWluZGVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIxcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGdyYXlzY2FsZV9kYXJrX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYm9keV9iZztcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIxcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDE2cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDMwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgLmlucHV0X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDQ1cHggMjA3cHggNDBweCA3M3B4O1xuLy8gICAgICAgICAgICAgICAgICAgICAmIC5pbnB1dF9zaW5nbGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJiBsYWJlbCBzcGFuIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogOXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgLmRpc3BsYXllZF9pbWcge1xuLy8gICAgICAgICAgICAgICAgIGhlaWdodDogNzAwcHg7XG4vLyAgICAgICAgICAgICAgICAgLmlucHV0X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDQ1cHggMjA3cHggNDBweCA3NXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAucm91bmRfY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMTVweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTE1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJiBpbWcge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAuYnRuX2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDM5cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJiAuaW5wdXRfc2luZ2xlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogLTk5OTlweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYgc3BhbiB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9pbnB1dF9mb250X3NpemU7IC8vMTRweFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJiAuYnRuIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTQ5cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGJhc2VfZm9udF9zaXplOyAvLzE2cHhcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAucGhvdG9fY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIzcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkYmFzZV9ib3JkZXJfcmFkaXVzO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNzVweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNEOEQ4RDg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYgaW1nIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmIC5idG4ge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA2NyU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGJhc2VfZm9udF9zaXplOyAvLzE2cHhcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDA7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDA7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBhdXRvO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggMTFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAmID4gLmJ0biB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNDlweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGJhc2VfZm9udF9zaXplOyAvLzE2cHhcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuY2FuY2VsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheXNjYWxlX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYmFzZV93aGl0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuc2F2ZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE3MnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJi5zYXZlLmRpc2FibGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNBREM4QzU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgJiAucGhvdG9fZ3JvdXAge31cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9IC8vZW5kIG9mIHRoZSBkaXNwbGF5IGltZ1xuLy8gICAgICAgICAgICAgLmJ0bl9ncm91cCB7XG4vLyAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuLy8gICAgICAgICAgICAgICAgICYgPiAuYnRuIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICYgPiAuc2F2ZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzNCU7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICYgPiAuY2FuY2VsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDc1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAuY29tcGFueV9pbmZvIHtcbi8vICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgLnRpdGxlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgJiBhIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYgLnJlbWluZGVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIxcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGdyYXlzY2FsZV9kYXJrX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYm9keV9iZztcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIxcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDE2cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDMwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgLmlucHV0X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDQwcHggMjA3cHggMHB4IDczcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICYgLmlucHV0X3JvdyB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0MnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLmluZHVzdHJ5IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmIC5zZWxlY3RfY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAyNHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgcHJlZml4KCggYmFja2dyb3VuZC1wb3NpdGlvbjogOTclIDUwJSwgKSwgd2Via2l0IG1veik7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYgc2VsZWN0IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmIGxhYmVsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogLTIycHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAxcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGdyYXlzY2FsZV9kYXJrX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBvZiB0aGUgLmluZHVzdHJ5XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLmxvY2F0aW9uIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VsZWN0X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxOHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiBzZWxlY3Qge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYgbGFiZWwge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMjJweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZ3JheXNjYWxlX2RhcmtfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIG9mIHRoZSAubG9jYXRpb25cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuc2l6ZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiAuc2VsZWN0X2NvbnRhaW5lciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMjRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwNHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmIHNlbGVjdCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiBsYWJlbCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IC0yMnB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRncmF5c2NhbGVfZGFya19jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgb2YgLnNpemVcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYueWVhcnMge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICYgLnNlbGVjdF9jb250YWluZXIge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDI0cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiBzZWxlY3Qge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYgbGFiZWwge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMjJweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZ3JheXNjYWxlX2RhcmtfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIG9mIC55ZWFyc1xuLy8gICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIG9mIHRoZSAuc2VsZWN0X2NvbnRhaW5lclxuLy8gICAgICAgICAgICAgICAgIH0gLy9lbmQgb2YgdGhlIC5pbnB1dF9jb250YWluZXJcbi8vICAgICAgICAgICAgIH0gLy9lbmQgb2YgdGhlIC5jb21wYW55X2luZm9cbi8vICAgICAgICAgICAgIC5jb21wYW55X3RhZ3Mge1xuLy8gICAgICAgICAgICAgICAgIC5pbnB1dF9jb250YWluZXIge1xuLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0MHB4IDIwN3B4IDQwcHggNzNweDtcbi8vICAgICAgICAgICAgICAgICAgICAgLmlucHV0X3NpbmdsZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDcwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmIGlucHV0IHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmIC50YWdfZ3JvdXAge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAzLjU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogMXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICB9IC8vIC5pbnB1dF9zaW5nbGVcbi8vICAgICAgICAgICAgICAgICB9IC8vIC5pbnB1dF9jb250YWluZXJcbi8vICAgICAgICAgICAgIH0gLy8gLmNvbXBhbnlfdGFnc1xuLy8gICAgICAgICAgICAgLmNvbXBhbnlfaW5zdHJvIHtcbi8vICAgICAgICAgICAgICAgICAuaW5wdXRfY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNDBweCAyMDdweCA0MHB4IDczcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgIC5pbnB1dF9zaW5nbGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiBpbml0aWFsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXJnaW4tYm90dG9tOiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgLm1lbnVfYmFyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxNXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNjBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4LzUwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29tcGFueV9pbnN0cm9fbWVudV9iYXJfYmc7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWwge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDYwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHgvNTAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjElO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0JTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAuY29udGVudCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICYgLmxpc3RfY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMjUwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMjVweCA0MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMThweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmOmJlZm9yZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwi4oCiXCI7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkcHJpX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogLTEwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAuZnVuY3Rpb25zX2Jhcntcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOjBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OjA7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIgLmZ1bmN0aW9uc19iYXJ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OjE7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICYgPiAuYnRuIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE0OXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLmNhbmNlbCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGdyYXlzY2FsZV9jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJhc2Vfd2hpdGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLnNhdmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNzJweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuc2F2ZS5kaXNhYmxlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQURDOEM1O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSAvL2VuZCBvZiB0aGUgLmNvbXBhbnlfaW5zdHJvXG4vLyAgICAgICAgICAgICAuc29jaWFsX25ldHdvcmsge1xuLy8gICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbi8vICAgICAgICAgICAgICAgICAudGl0bGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAmIGEge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJiAucmVtaW5kZXIge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheXNjYWxlX2RhcmtfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRib2R5X2JnO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6ICRiYXNlX2ZvbnRfc2l6ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjFweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMTZweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMzBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAuaW5wdXRfY29udGFpbmVyIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNjZweCAyMDdweCA0MHB4IDczcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICYgPiAuYnRuX3ByaSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxNjZweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE0OXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLmNhbmNlbCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGdyYXlzY2FsZV9jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJhc2Vfd2hpdGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAmLnNhdmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNzJweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuc2F2ZS5kaXNhYmxlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQURDOEM1O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIC5idG4uc29jaWFsX21lZGlhX2J0biB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogaW5pdGlhbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogNjNweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAwcHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGJhc2Vfd2hpdGU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheXNjYWxlX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJi5sbnItY2hlY2ttYXJrLWNpcmNsZTpiZWZvcmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkbG5yX2ZvbnQ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtMzZweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHRoaXJkX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogNTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYub2ZmaWNhbCB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJi5hY3RpdmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6NTBweDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYuZmFjZWJvb2sge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzNCNTk5Nztcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9pbWcvcHJvZmlsZV9pbWcvZmIucG5nKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIHByZWZpeCgoIGJhY2tncm91bmQtc2l6ZTphdXRvIDUyJSwgYmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIpLCB3ZWJraXQgbW96KTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYubGlua2VkaW4ge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaV9jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9pbWcvcHJvZmlsZV9pbWcvbGlua2VkaW4ucG5nKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIHByZWZpeCgoIGJhY2tncm91bmQtc2l6ZTphdXRvIDY2JSwgYmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIpLCB3ZWJraXQgbW96KTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICYudHdpdHRlciB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJi5hY3RpdmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpX2NsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2ltZy9wcm9maWxlX2ltZy90dy5wbmcpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgcHJlZml4KCggYmFja2dyb3VuZC1zaXplOmF1dG8gNTIlLCBiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciksIHdlYmtpdCBtb3opO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJi5nb29nbGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaV9jbDtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9pbWcvcHJvZmlsZV9pbWcvZ29vZ2xlcGx1cy5wbmcpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgcHJlZml4KCggYmFja2dyb3VuZC1zaXplOmF1dG8gNjYlLCBiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciksIHdlYmtpdCBtb3opO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgJi5sbnItY2hlY2ttYXJrLWNpcmNsZSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJjpiZWZvcmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmLmFjdGl2ZTpiZWZvcmUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbml0aWFsO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAmIC5pbnB1dF9zaW5nbGUge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMXB4O1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgfSAvLy5pbnB1dF9jb250YWluZXJcbi8vICAgICAgICAgICAgIH0gLy8uc29jaWFsX25ldHdvcmtcbi8vICAgICAgICAgfSAvLyBlbmQgb2YgdGhlIC5jb250ZW50X2NvbnRhaW5lclxuLy8gICAgICAgICAucmVtaW5kZXIge1xuLy8gICAgICAgICAgICAgJjpob3ZlciB7XG4vLyAgICAgICAgICAgICAgICAgJiAuaGludF9jb250YWluZXIge1xuLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAuaGludF9jb250YWluZXIge1xuLy8gICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4vLyAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuLy8gICAgICAgICAgICAgICAgIHdpZHRoOiAyODhweDtcbi8vICAgICAgICAgICAgICAgICBsZWZ0OiA3MHB4O1xuLy8gICAgICAgICAgICAgICAgIHRvcDogLTE3cHg7XG4vLyAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGJhc2VfYm9yZGVyX3JhZGl1cztcbi8vICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuLy8gICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYXNlX3doaXRlO1xuLy8gICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHggMTVweDtcbi8vICAgICAgICAgICAgICAgICAmIGgzIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAkYmFzZV9mb250X3NpemU7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkZ3JheXNjYWxlX2RhcmtfY2w7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICYgcCB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbi8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRncmF5c2NhbGVfY2w7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAkYmFzZV9mb250X3dlaWdodDtcbi8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gLy8ucmVtaW5kZXJcbi8vICAgICB9XG4vLyB9IC8vIGVuZCBvZiB0aGUgLnByb2ZpbGVcbi8vID4+Pj4+Pj4gZGV2XG4iLCIvL3ZhcmlhYmxlIG5hbWluZyBydWxlID09PT09PT09PT09PT09PlRPRE9cbi8vJERlc2NyaXB0aW9uLWNzc19zdHlsZV9uYW1lXG5cbi8vIFZhcmlhYmxlc1xuXG4vLyA9PSBDb2xvcnMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vL1xuLy8jIyBEZWZpbmUgYWxsIHRoZSBjb2xvcnMgaGVyZVxuXG4vL0RlZmluZSBhIHZhcmlhYmxlIHRvIGNvbnRhaW4gYWxsIG1haW4gY29sb3JzIHRvXG4vL2dlbmVyYXRlIHRoZSBjbGFzcyBkeW5hbWljYWxseVxuJGNvbG9yczpcblwicHJpX2NsXCIgIzZCQjRBRCxcblwicHJpX2xpZ2h0X2NsXCIgIzhERDRDRCxcblwicHJpX2RhcmtfY2xcIiAjNDk4RDg2LFxuXCJzZWNfY2xcIiAjRDk1MTYxLFxuXCJzZWNfZGFya19jbFwiICNCQzQxNEYsXG5cImdyYXlzY2FsZV9jbFwiICM5MjkyOTIsXG5cImdyYXlzY2FsZV9saWdodF9jbFwiICNEQkQ5RDgsXG5cImdyYXlzY2FsZV9tZF9jbFwiICM1RjVFNUUsXG5cImdyYXlzY2FsZV9kYXJrX2NsXCIgIzRCNEI0QixcblwiYmFzZV93aGl0ZVwiICNmZmZmZmY7XG5cblxuJHByaV9jbDogICAgXHQgICAgXHQjNkJCNEFEOyAgLy9wcmltYXJ5IGNvbG9yXG4kcHJpX2xpZ2h0X2NsOiAgICAgIFx0IzhERDRDRDtcbiRwcmlfZGFya19jbDogICAgICAgXHQjNDk4RDg2O1xuXG5cbiRzZWNfY2w6XHRcdFx0XHQjRDk1MTYxO1xuJHNlY19kYXJrX2NsOiAgICAgICBcdCNCQzQxNEY7IFxuXG4kdGhpcmRfY2w6ICAjNTk5OTkzO1xuXG4kZ3JheXNjYWxlX2NsOlx0XHRcdCM5MjkyOTI7XG4kZ3JheXNjYWxlX2xpZ2h0X2NsOlx0I0RCRDlEODtcbiRncmF5c2NhbGVfZGFya19jbDogXHQjNEI0QjRCO1xuJGdyYXlzY2FsZV9tZF9jbDogICAgICAgIzVGNUU1RTtcbiRiYXNlX3doaXRlOiBcdFx0XHQjZmZmZmZmO1xuJGdyYXlzY2FsZV81Olx0XHRcdCNkMGNkY2I7XG4kZ3JheXNjYWxlXzY6ICAgICAgICAgICAjRjVGM0YyO1xuXG5cblxuJHByb2ZpbGVfZWRpdF90aXRsZV9jb2xvcjogI0REREZERTtcbiRjb21wYW55X2luc3Ryb19tZW51X2Jhcl9iZzogJHByb2ZpbGVfZWRpdF90aXRsZV9jb2xvcjtcblxuXG4vLz09IFNjYWZmb2xkaW5nID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBcbi8vXG4vLyMjIFNldHRpbmcgZm9yIGdsb2JhbCBzdHlsZXNcblxuXG4vLyoqIEdsb2JhbCB0ZXh0IGNvbG9yIG9uIGA8Ym9keT5gLlxuJHRleHRfY29sb3I6ICAgICAgICAgICAgJGdyYXlzY2FsZV9kYXJrX2NsO1xuXG4kcmVtaW5kX3RleHRfY29sb3I6XHRcdCRzZWNfY2w7XG5cblxuLy8qKiBHbG9iYWwgdGV4dHVhbCBsaW5rIGNvbG9yLlxuJGxpbmtfY29sb3I6ICAgICAgICAgICAgJHByaV9jbDtcbi8vKiogTGluayBob3ZlciBjb2xvciBzZXQgdmlhIGBkYXJrZW4oKWAgZnVuY3Rpb24uXG4kbGlua19ob3Zlcl9jb2xvcjogICAgICAjNTk5OTkzO1xuLy8qKiBMaW5rIGhvdmVyIGRlY29yYXRpb24uXG4kbGlua19ob3Zlcl9kZWNvcmF0aW9uOiA7XG5cblxuXG5cbi8vPT0gVHlwb2dyYXBoeSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjIEZvbnQsIGxpbmUtaGVpZ2h0LCBhbmQgY29sb3IgZm9yIGJvZHkgdGV4dCwgaGVhZGluZ3MsIGFuZCBtb3JlLlxuLy8qKiBEZWZhdWx0IG1vbm9zcGFjZSBmb250cyBmb3IgYDxjb2RlPmAsIGA8a2JkPmAsIGFuZCBgPHByZT5gLlxuXG4kYmFzZV9mb250X2ZhbWlseTogICAgICAgJ0F2ZW5pcicsSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiAhZGVmYXVsdDtcbiRiYXNlX2ZvbnRfd2VpZ2h0Olx0XHQgNTAwOyAvLyBub3JtYWxcbiRiYXNlX2ZvbnRfd2VpZ2h0X2JvbGQ6ICAgNjAwO1xuJGxucl9mb250OidMaW5lYXJpY29ucy1GcmVlJztcblxuXG4kYmFzZV9mb250X3NpemU6XHRcdFx0MTZweDtcbiRiYXNlX2lucHV0X2ZvbnRfc2l6ZTpcdFx0Y2VpbCgoJGJhc2VfZm9udF9zaXplICogMC44NzUpKSAhZGVmYXVsdDsgLy8gfjE0cHhcbiRiYXNlX2lucHV0X2xhYmVsX2ZvbnRfc2l6ZTogMTZweDtcbiRsYXJnZV9mb250X3NpemU6ICAgICAgICAgXHRjZWlsKCgkYmFzZV9mb250X3NpemUgKiAxLjI1KSkgIWRlZmF1bHQ7IC8vIH4xOHB4XG4kc21hbGxfZm9udF9zaXplOiAgICAgICAgIFx0Y2VpbCgoJGJhc2VfZm9udF9zaXplICogMC44NSkpICFkZWZhdWx0OyAvLyB+MTJweFxuXG5cbiR4eGxnX2ZvbnQ6IDQ4cHg7XG4keGxnX2ZvbnQ6IDM2cHg7XG4kbGdfZm9udDogMjhweDtcbiRtZF9mb250OjIwcHg7XG4kcmdfZm9udDoxOHB4O1xuJHJnc19mb250OjE2cHg7XG4kc21fZm9udDoxNHB4O1xuJHhzX2ZvbnQ6MTJweDtcblxuJGgxX2ZvbnRfc2l6ZTogICAgICAgICAgICBmbG9vcigoJGJhc2VfZm9udF9zaXplICogMi4yNSkpICFkZWZhdWx0OyAvLyB+MzZweFxuJGgyX2ZvbnRfc2l6ZTogICAgICAgICAgICBmbG9vcigoJGJhc2VfZm9udF9zaXplICogMS43NSkpICFkZWZhdWx0OyAvLyB+MjhweFxuJGgzX2ZvbnRfc2l6ZTogICAgICAgICAgICBjZWlsKCgkYmFzZV9mb250X3NpemUgKiAxLjI1KSkgIWRlZmF1bHQ7IC8vIH4yMHB4XG4kaDRfZm9udF9zaXplOlx0XHRcdCAgJGJhc2VfZm9udF9zaXplICFkZWZhdWx0O1xuJGg1X2ZvbnRfc2l6ZTogICAgICAgICAgICA7XG4kaDZfZm9udF9zaXplOiAgICAgICAgICAgIDsgLy8gfjEycHhcblxuXG5cblxuLy8gLy8qKiBVbml0LWxlc3MgYGxpbmUtaGVpZ2h0YCBmb3IgdXNlIGluIGNvbXBvbmVudHMgbGlrZSBidXR0b25zLlxuJGJhc2VfbGluZV9oZWlnaHQ6ICAgICAgICAyMiAvIDE2ICFkZWZhdWx0OyAvLyAyMC8xNFxuLy8gLy8qKiBDb21wdXRlZCBcImxpbmUtaGVpZ2h0XCIgKGBmb250LXNpemVgICogYGxpbmUtaGVpZ2h0YCkgZm9yIHVzZSB3aXRoIGBtYXJnaW5gLCBgcGFkZGluZ2AsIGV0Yy5cbi8vICRsaW5lLWhlaWdodC1jb21wdXRlZDogICAgZmxvb3IoKCRiYXNlLWZvbnQtc2l6ZSAqICRsaW5lLWhlaWdodC1iYXNlKSkgIWRlZmF1bHQ7IC8vIH4yMHB4XG5cbi8vKioqKioqKiogRG9uJ3QgdW5jb21tZW50IGFib3ZlIGxpbmUgdGVtcG9yYXJpbHkgYmVjYXVzZSBpdCB3aWxsIGNhdXNlIGVycm9yICoqKioqKioqKioqKioqKioqKioqXG5cblxuLy89PT09PT09PT09IENvbXBvbmVudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vL1xuLy8jIyBEZWZpbmUgY29tbW9uIHBhZGRpbmcgYW5kIGJvcmRlciByYWRpdXMgc2l6ZXMgYW5kIG1vcmUuIFZhbHVlcyBiYXNlZCBvbiAxNHB4IHRleHQgYW5kIDEuNDI4IGxpbmUtaGVpZ2h0ICh+MjBweCB0byBzdGFydCkuXG5cbiRiYXNlX3BhZGRpbmdfdmVydGljYWw6ICAgICAxNXB4O1xuJGJhc2VfcGFkZGluZ19ob3Jpem9udGFsOiAgIDE1cHg7XG5cbiRsYXJnZV9wYWRkaW5nX3ZlcnRpY2FsOiAgICA7XG4kbGFyZ2VfcGFkZGluZ19ob3Jpem9udGFsOiAgO1xuXG4kc21hbGxfcGFkZGluZ192ZXJ0aWNhbDogICAgO1xuJHNtYWxsX3BhZGRpbmdfaG9yaXpvbnRhbDogIDtcblxuJHhzX3BhZGRpbmdfdmVydGljYWw6ICAgICAgIDtcbiR4c19wYWRkaW5nX2hvcml6b250YWw6ICAgICA7XG5cbiRsYXJnZV9saW5lX2hlaWdodDogICAgICAgICA7XG4kc21hbGxfbGluZV9oZWlnaHQ6ICAgICAgICAgO1xuXG4kYmFzZV9ib3JkZXJfcmFkaXVzOiAgICAgICAgNXB4O1xuJGxhcmdlX2JvcmRlcl9yYWRpdXM6ICAgICAgIDtcbiRzbWFsbF9ib3JkZXJfcmFkaXVzOiAgICAgICA7XG5cbi8vKiogR2xvYmFsIGNvbG9yIGZvciBhY3RpdmUgaXRlbXMgKGUuZy4sIG5hdnMgb3IgZHJvcGRvd25zKS5cbiRjb21wb25lbnRfYWN0aXZlX2NvbG9yOiAgICA7XG4vLyoqIEdsb2JhbCBiYWNrZ3JvdW5kIGNvbG9yIGZvciBhY3RpdmUgaXRlbXMgKGUuZy4sIG5hdnMgb3IgZHJvcGRvd25zKS5cbiRjb21wb25lbnRfYWN0aXZlX2JnOiAgICAgICA7O1xuXG5cbi8vID09PT09PT09IFNwYWNpbmcgPT09PT09PT09PT09PS9cbiRzcGFjZV9sZzo3MHB4O1xuJHNwYWNlX21kOjM1cHg7XG4kc3BhY2Vfc206MjZweDtcbiRzcGFjZV94czoxMHB4O1xuXG5cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBCdXR0b25zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgRm9yIGVhY2ggb2YgQm9vdHN0cmFwJ3MgYnV0dG9ucywgZGVmaW5lIHRleHQsIGJhY2tncm91bmQgYW5kIGJvcmRlciBjb2xvci5cblxuJGJ0bl9mb250X3dlaWdodDogICAgICAgICAgIGJvbGQgIWRlZmF1bHQ7XG5cbiRidG5fcHJpX2hlaWdodDpcdFx0XHQ1MHB4O1xuJGJ0bl9wcmlfY29sb3I6XHRcdFx0XHQkcHJpX2NsO1xuXG4kYnRuX3NlY19oZWlnaHQ6XHRcdFx0MzFweDtcbiRidG5fc2VjX2NvbG9yOlx0XHRcdFx0JHNlY19jbDtcblxuJGJ0bl9saW5rX2Rpc2FibGVkX2NvbG9yOiAgICAgICAgO1xuXG4vLyBBbGxvd3MgZm9yIGN1c3RvbWl6aW5nIGJ1dHRvbiByYWRpdXMgaW5kZXBlbmRlbnRseSBmcm9tIGdsb2JhbCBib3JkZXIgcmFkaXVzXG4kYnRuX2JvcmRlcl9yYWRpdXNfYmFzZTogICAgICAgICA1cHg7XG4kYnRuX2JvcmRlcl9yYWRpdXNfbGFyZ2U6ICAgICAgICA7XG4kYnRuX2JvcmRlcl9yYWRpdXNfc21hbGw6ICAgICAgICA7XG5cbiRidG5fYmFzZV93aWR0aDoyMDRweDtcbiRidG5fYmFzZV9oZWlnaHQ6NTBweDtcbiRidG5fbGdfd2lkdGg6O1xuJGJ0bl9tZF93aWR0aDo7XG4kYnRuX3NtX3dpZHRoOjtcbiRidG5feHNfd2lkdGg6O1xuXG4vLz09PT09PSBGb3JtcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjXG5cbi8vKiogYDxpbnB1dD5gIGJhY2tncm91bmQgY29sb3JcbiRpbnB1dF9iZzogICAgICAgICAgICAgICAgICAgICAgICRiYXNlX3doaXRlO1xuLy8qKiBgPGlucHV0IGRpc2FibGVkPmAgYmFja2dyb3VuZCBjb2xvclxuJGlucHV0X2JnX2Rpc2FibGVkOiAgICAgICAgICAgICAgO1xuXG4kaW5wdXRfd2FybmluZ19iZzpcdFx0XHRcdCNGREY2OTQ7XG5cbi8vKiogVGV4dCBjb2xvciBmb3IgYDxpbnB1dD5gc1xuJGlucHV0X2NvbG9yOiAgICAgICAgICAgICAgICAgICAgJGJhc2Vfd2hpdGU7XG4vLyoqIGA8aW5wdXQ+YCBib3JkZXIgY29sb3JcbiRpbnB1dF9ib3JkZXI6ICAgICAgICAgICAgICAgICAgIDtcblxuLy8gVE9ETzogUmVuYW1lIGAkaW5wdXQtYm9yZGVyLXJhZGl1c2AgdG8gYCRpbnB1dC1ib3JkZXItcmFkaXVzLWJhc2VgIGluIHY0XG4vLyoqIERlZmF1bHQgYC5mb3JtLWNvbnRyb2xgIGJvcmRlciByYWRpdXNcbi8vIFRoaXMgaGFzIG5vIGVmZmVjdCBvbiBgPHNlbGVjdD5gcyBpbiBzb21lIGJyb3dzZXJzLCBkdWUgdG8gdGhlIGxpbWl0ZWQgc3R5bGFiaWxpdHkgb2YgYDxzZWxlY3Q+YHMgaW4gQ1NTLlxuJGlucHV0X2JvcmRlcl9yYWRpdXM6ICAgICAgICAgICAgNXB4O1xuLy8qKiBMYXJnZSBgLmZvcm1fY29udHJvbGAgYm9yZGVyIHJhZGl1c1xuJGlucHV0X2JvcmRlcl9yYWRpdXNfbGFyZ2U6ICAgICAgO1xuLy8qKiBTbWFsbCBgLmZvcm1fY29udHJvbGAgYm9yZGVyIHJhZGl1c1xuJGlucHV0X2JvcmRlcl9yYWRpdXNfc21hbGw6ICAgICAgO1xuXG4kY2hlY2tfYm94X3NpemVfYmFzZTpcdFx0MTdweDsgLy9mb3IgYm90aCBjaGVja2JveCBhbmQgcmFkaW9cblxuLy8qKiBCb3JkZXIgY29sb3IgZm9yIGlucHV0cyBvbiBmb2N1c1xuJGlucHV0X2JvcmRlcl9mb2N1czogICAgICAgICAgICAgO1xuLy8qKiBQbGFjZWhvbGRlciB0ZXh0IGNvbG9yXG4kaW5wdXRfY29sb3JfcGxhY2Vob2xkZXI6ICAgICAgICA7XG5cbi8vKiogRGVmYXVsdCBgLmZvcm1fY29udHJvbGAgaGVpZ2h0XG4kaW5wdXRfaGVpZ2h0X2Jhc2U6ICAgICAgICAgICAgICAzMXB4O1xuLy8qKiBMYXJnZSBgLmZvcm1fY29udHJvbGAgaGVpZ2h0XG4kaW5wdXRfaGVpZ2h0X2xhcmdlOiAgICAgICAgICAgICA7XG4vLyoqIFNtYWxsIGAuZm9ybV9jb250cm9sYCBoZWlnaHRcbiRpbnB1dF9oZWlnaHRfc21hbGw6ICAgICAgICAgICAgIDtcblxuLy8qKiBgLmZvcm1fZ3JvdXBgIG1hcmdpblxuJGZvcm1fZ3JvdXBfbWFyZ2luX2JvdHRvbTogICAgICAgMTVweCAhZGVmYXVsdDtcblxuXG4vLyoqIEJhY2tncm91bmQgY29sb3IgZm9yIHRleHR1YWwgaW5wdXQgYWRkb25zXG4kaW5wdXRfZ3JvdXBfYWRkb25fYmc6ICAgICAgICAgICA7XG4vLyoqIEJvcmRlciBjb2xvciBmb3IgdGV4dHVhbCBpbnB1dCBhZGRvbnNcbiRpbnB1dF9ncm91cF9hZGRvbl9ib3JkZXJfY29sb3I6IDtcblxuLy8qKiBEaXNhYmxlZCBjdXJzb3IgZm9yIGZvcm0gY29udHJvbHMgYW5kIGJ1dHRvbnMuXG4kY3Vyc29yX2Rpc2FibGVkOiAgICAgICAgICAgICAgICBub3QtYWxsb3dlZCAhZGVmYXVsdDtcblxuXG5cbi8vPT0gRHJvcGRvd25zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgRHJvcGRvd24gbWVudSBjb250YWluZXIgYW5kIGNvbnRlbnRzLlxuXG5cbiRkcm9wZG93bl9iYXNlX2hlaWdodDogNDFweDtcbiRkcm9wZHdvbl9iYXNlX3dpZHRoOiAxNjJweDtcbi8vKiogQmFja2dyb3VuZCBmb3IgdGhlIGRyb3Bkb3duIG1lbnUuXG4kZHJvcGRvd25fYmc6ICAgICAgICAgICAgICAgICAgICA7XG4vLyoqIERyb3Bkb3duIG1lbnUgYGJvcmRlcl9jb2xvcmAuXG4kZHJvcGRvd25fYm9yZGVyOiAgICAgICAgICAgICAgICA7XG4vLyoqIERyb3Bkb3duIG1lbnUgYGJvcmRlcl9jb2xvcmAgKipmb3IgSUU4KiouXG4kZHJvcGRvd25fZmFsbGJhY2tfYm9yZGVyOiAgICAgICA7XG4vLyoqIERpdmlkZXIgY29sb3IgZm9yIGJldHdlZW4gZHJvcGRvd24gaXRlbXMuXG4kZHJvcGRvd25fZGl2aWRlcl9iZzogICAgICAgICAgICA7XG5cbi8vKiogRHJvcGRvd24gbGluayB0ZXh0IGNvbG9yLlxuJGRyb3Bkb3duX2xpbmtfY29sb3I6ICAgICAgICAgICAgO1xuLy8qKiBIb3ZlciBjb2xvciBmb3IgZHJvcGRvd24gbGlua3MuXG4kZHJvcGRvd25fbGlua19ob3Zlcl9jb2xvcjogICAgICA7XG4vLyoqIEhvdmVyIGJhY2tncm91bmQgZm9yIGRyb3Bkb3duIGxpbmtzLlxuJGRyb3Bkb3duX2xpbmtfaG92ZXJfYmc6ICAgICAgICAgO1xuXG4vLyoqIEFjdGl2ZSBkcm9wZG93biBtZW51IGl0ZW0gdGV4dCBjb2xvci5cbiRkcm9wZG93bl9saW5rX2FjdGl2ZV9jb2xvcjogICAgIDtcbi8vKiogQWN0aXZlIGRyb3Bkb3duIG1lbnUgaXRlbSBiYWNrZ3JvdW5kIGNvbG9yLlxuJGRyb3Bkb3duX2xpbmtfYWN0aXZlX2JnOiAgICAgICAgO1xuXG4vLyoqIERpc2FibGVkIGRyb3Bkb3duIG1lbnUgaXRlbSBiYWNrZ3JvdW5kIGNvbG9yLlxuJGRyb3Bkb3duX2xpbmtfZGlzYWJsZWRfY29sb3I6ICAgO1xuXG4vLyoqIFRleHQgY29sb3IgZm9yIGhlYWRlcnMgd2l0aGluIGRyb3Bkb3duIG1lbnVzLlxuJGRyb3Bkb3duX2hlYWRlcl9jb2xvcjogICAgICAgICAgO1xuXG4vLyoqIERlcHJlY2F0ZWQgYCRkcm9wZG93bl9jYXJldF9jb2xvcmAgYXMgb2YgdjMuMS4wXG4kZHJvcGRvd25fY2FyZXRfY29sb3I6ICAgICAgICAgICA7XG5cblxuLy8tLSBaLWluZGV4IG1hc3RlciBsaXN0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIFdhcm5pbmc6IEF2b2lkIGN1c3RvbWl6aW5nIHRoZXNlIHZhbHVlcy4gVGhleSdyZSB1c2VkIGZvciBhIGJpcmQncyBleWUgdmlld1xuLy8gb2YgY29tcG9uZW50cyBkZXBlbmRlbnQgb24gdGhlIHotYXhpcyBhbmQgYXJlIGRlc2lnbmVkIHRvIGFsbCB3b3JrIHRvZ2V0aGVyLlxuLy9cbi8vIE5vdGU6IFRoZXNlIHZhcmlhYmxlcyBhcmUgbm90IGdlbmVyYXRlZCBpbnRvIHRoZSBDdXN0b21pemVyLlxuXG4kemluZGV4X3Rvb2x0aXA6ICAgICAgICAgICAxMDcwICFkZWZhdWx0O1xuJHppbmRleF9wb3BvdmVyOiAgICAgICAgICAgMTA2MCAhZGVmYXVsdDtcbiR6aW5kZXhfbW9kYWw6ICAgICAgICAgICAgIDEwNTAgIWRlZmF1bHQ7XG4kemluZGV4X21vZGFsLWJhY2tncm91bmQ6ICAxMDQwICFkZWZhdWx0O1xuJHppbmRleF9uYXZiYXItZml4ZWQ6ICAgICAgMTAzMCAhZGVmYXVsdDtcbiR6aW5kZXhfbmF2YmFyOiAgICAgICAgICAgIDEwMDAgIWRlZmF1bHQ7XG4kemluZGV4X2Ryb3Bkb3duOiAgICAgICAgICAxMDAwICFkZWZhdWx0O1xuXG5cblxuLy89PSBNZWRpYSBxdWVyaWVzIGJyZWFrcG9pbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgRGVmaW5lIHRoZSBicmVha3BvaW50cyBhdCB3aGljaCB5b3VyIGxheW91dCB3aWxsIGNoYW5nZSwgYWRhcHRpbmcgdG8gZGlmZmVyZW50IHNjcmVlbiBzaXplcy5cblxuLy8gRXh0cmEgc21hbGwgc2NyZWVuIC8gcGhvbmVcbi8vKiogRGVwcmVjYXRlZCBgJHNjcmVlbi14c2AgYXMgb2YgdjMuMC4xXG4kc2NyZWVuX3hzOiAgICAgICAgICAgICAgICAgIDQ4MHB4ICFkZWZhdWx0O1xuLy8qKiBEZXByZWNhdGVkIGAkc2NyZWVuX3hzX21pbmAgYXMgb2YgdjMuMi4wXG4kc2NyZWVuX3hzX21pbjogICAgICAgICAgICAgICRzY3JlZW5feHMgIWRlZmF1bHQ7XG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW5fcGhvbmVgIGFzIG9mIHYzLjAuMVxuJHNjcmVlbl9waG9uZTogICAgICAgICAgICAgICAkc2NyZWVuX3hzX21pbiAhZGVmYXVsdDtcblxuLy8gU21hbGwgc2NyZWVuIC8gdGFibGV0XG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW5fc21gIGFzIG9mIHYzLjAuMVxuJHNjcmVlbl9zbTogICAgICAgICAgICAgICAgICA3NjhweCAhZGVmYXVsdDtcbiRzY3JlZW5fc21fbWluOiAgICAgICAgICAgICAgJHNjcmVlbl9zbSAhZGVmYXVsdDtcbi8vKiogRGVwcmVjYXRlZCBgJHNjcmVlbl90YWJsZXRgIGFzIG9mIHYzLjAuMVxuJHNjcmVlbl90YWJsZXQ6ICAgICAgICAgICAgICAkc2NyZWVuX3NtX21pbiAhZGVmYXVsdDtcblxuLy8gTWVkaXVtIHNjcmVlbiAvIGRlc2t0b3Bcbi8vKiogRGVwcmVjYXRlZCBgJHNjcmVlbl9tZGAgYXMgb2YgdjMuMC4xXG4kc2NyZWVuX21kOiAgICAgICAgICAgICAgICAgIDk5MnB4ICFkZWZhdWx0O1xuJHNjcmVlbl9tZF9taW46ICAgICAgICAgICAgICAkc2NyZWVuX21kICFkZWZhdWx0O1xuLy8qKiBEZXByZWNhdGVkIGAkc2NyZWVuX2Rlc2t0b3BgIGFzIG9mIHYzLjAuMVxuJHNjcmVlbl9kZXNrdG9wOiAgICAgICAgICAgICAkc2NyZWVuX21kX21pbiAhZGVmYXVsdDtcblxuLy8gTGFyZ2Ugc2NyZWVuIC8gd2lkZSBkZXNrdG9wXG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW5fbGdgIGFzIG9mIHYzLjAuMVxuJHNjcmVlbl9sZzogICAgICAgICAgICAgICAgICAxMjAwcHggIWRlZmF1bHQ7XG4kc2NyZWVuX2xnX21pbjogICAgICAgICAgICAgICRzY3JlZW5fbGcgIWRlZmF1bHQ7XG4vLyoqIERlcHJlY2F0ZWQgYCRzY3JlZW5fbGdfZGVza3RvcGAgYXMgb2YgdjMuMC4xXG4kc2NyZWVuX2xnX2Rlc2t0b3A6ICAgICAgICAgICRzY3JlZW5fbGdfbWluICFkZWZhdWx0O1xuXG4vLyBTbyBtZWRpYSBxdWVyaWVzIGRvbid0IG92ZXJsYXAgd2hlbiByZXF1aXJlZCwgcHJvdmlkZSBhIG1heGltdW1cbiRzY3JlZW5feHNfbWF4OiAgICAgICAgICAgICAgKCRzY3JlZW5fc21fbWluIC0gMSkgIWRlZmF1bHQ7XG4kc2NyZWVuX3NtX21heDogICAgICAgICAgICAgICgkc2NyZWVuX21kX21pbiAtIDEpICFkZWZhdWx0O1xuJHNjcmVlbl9tZF9tYXg6ICAgICAgICAgICAgICAoJHNjcmVlbl9sZ19taW4gLSAxKSAhZGVmYXVsdDtcblxuXG4vLz09IEdyaWQgc3lzdGVtID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgRGVmaW5lIHlvdXIgY3VzdG9tIHJlc3BvbnNpdmUgZ3JpZC5cblxuLy8qKiBOdW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZ3JpZC5cbiRncmlkX2NvbHVtbnM6ICAgICAgICAgICAgICAxMiAhZGVmYXVsdDtcbi8vKiogUGFkZGluZyBiZXR3ZWVuIGNvbHVtbnMuIEdldHMgZGl2aWRlZCBpbiBoYWxmIGZvciB0aGUgbGVmdCBhbmQgcmlnaHQuXG4kZ3JpZF9ndXR0ZXJfd2lkdGg6ICAgICAgICAgMzBweCAhZGVmYXVsdDtcbi8vIE5hdmJhciBjb2xsYXBzZVxuLy8qKiBQb2ludCBhdCB3aGljaCB0aGUgbmF2YmFyIGJlY29tZXMgdW5jb2xsYXBzZWQuXG4kZ3JpZF9mbG9hdF9icmVha3BvaW50OiAgICAgJHNjcmVlbl9zbV9taW4gIWRlZmF1bHQ7XG4vLyoqIFBvaW50IGF0IHdoaWNoIHRoZSBuYXZiYXIgYmVnaW5zIGNvbGxhcHNpbmcuXG4kZ3JpZF9mbG9hdF9icmVha3BvaW50X21heDogKCRncmlkX2Zsb2F0X2JyZWFrcG9pbnQgLSAxKSAhZGVmYXVsdDtcblxuXG5cbi8vPT0gQ29udGFpbmVycyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjIERlZmluZSB0aGUgbWF4IGFuZCBtaW4gb2YgeW91ciAnLmNvbnRhaW5lcicgZm9yIGRpZmZlcmVudCBzY3JlZW4gc2l6ZVxuXG4vLyBTbWFsbCBzY3JlZW4gLyB0YWJsZXRcbiRjb250YWluZXJfdGFibGV0OiAgICAgICAgICAgICAoNzIwcHggKyAkZ3JpZF9ndXR0ZXJfd2lkdGgpICFkZWZhdWx0O1xuLy8qKiBGb3IgYCRzY3JlZW4tc20tbWluYCBhbmQgdXAuXG4kY29udGFpbmVyX3NtOiAgICAgICAgICAgICAgICAgJGNvbnRhaW5lcl90YWJsZXQgIWRlZmF1bHQ7XG5cbi8vIE1lZGl1bSBzY3JlZW4gLyBkZXNrdG9wXG4kY29udGFpbmVyX2Rlc2t0b3A6ICAgICAgICAgICAgKDk0MHB4ICsgJGdyaWRfZ3V0dGVyX3dpZHRoKSAhZGVmYXVsdDtcbi8vKiogRm9yIGAkc2NyZWVuX21kX21pbmAgYW5kIHVwLlxuJGNvbnRhaW5lcl9tZDogICAgICAgICAgICAgICAgICRjb250YWluZXJfZGVza3RvcCAhZGVmYXVsdDtcblxuLy8gTGFyZ2Ugc2NyZWVuIC8gd2lkZSBkZXNrdG9wXG4kY29udGFpbmVyX2xhcmdlX2Rlc2t0b3A6ICAgICAgKDExNDBweCArICRncmlkX2d1dHRlcl93aWR0aCkgIWRlZmF1bHQ7XG4vLyoqIEZvciBgJHNjcmVlbl9sZ19taW5gIGFuZCB1cC5cbiRjb250YWluZXJfbGc6O1xuXG5cblxuLy89PSBoZWFkZXIgPT09PT09PT09PT09PT09PT09PT09PT09XG4kaGVhZGVyX2hlaWdodDpcdFx0XHQ4MHB4O1xuXG5cbi8vPT0gTmF2IEJhciA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjIEFzIHRpdGxlLHRoZSBzdHlsZXMgb2YgbmF2IGJhciwgbGlrZSBsaW5rcyxsYWJlbCxpbnZlcnRlZCAuZXRjXG4vLyBCYXNpY3Mgb2YgYSBuYXZiYXJcblxuJG5hdmJhcl9oZWlnaHQ6XHRcdFx0XHRcdDYwcHg7XG4kbmF2YmFyX2JnOlx0XHRcdFx0XHRcdCM1RjVFNUU7XG4kbmF2YmFyX2NvbG9yOlx0XHRcdFx0XHQkYmFzZV93aGl0ZTtcbiRuYXZiYXJfbWFyZ2luX2JvdHRvbTogICAgICAgICAgICAgO1xuJG5hdmJhcl9ib3JkZXJfcmFkaXVzOiAgICAgICAgICAgICA7XG4kbmF2YmFyX3BhZGRpbmdfaG9yaXpvbnRhbDogICAgICAgIDtcbiRuYXZiYXJfcGFkZGluZ192ZXJ0aWNhbDogICAgICAgICAgO1xuJG5hdmJhcl9jb2xsYXBzZV9tYXhfaGVpZ2h0OiAgICAgICA7XG5cblxuLy8gTmF2YmFyIGxpbmtzXG4kbmF2YmFyX2RlZmF1bHRfbGlua19jb2xvcjogICAgICAgICAgICAgICAgO1xuJG5hdmJhcl9kZWZhdWx0X2xpbmtfaG92ZXJfY29sb3I6ICAgICAgICAgIDtcbiRuYXZiYXJfZGVmYXVsdF9saW5rX2hvdmVyX2JnOiAgICAgICAgICAgICA7XG4kbmF2YmFyX2RlZmF1bHRfbGlua19hY3RpdmVfY29sb3I6ICAgICAgICAgO1xuJG5hdmJhcl9kZWZhdWx0X2xpbmtfYWN0aXZlX2JnOiAgICAgICAgICAgIDtcbiRuYXZiYXJfZGVmYXVsdF9saW5rX2Rpc2FibGVkX2NvbG9yOiAgICAgICA7XG4kbmF2YmFyX2RlZmF1bHRfbGlua19kaXNhYmxlZF9iZzogICAgICAgICAgO1xuXG5cblxuLy89PSBOYXZzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgU2hhcmVkIG5hdiBzdHlsZXMsIHRhYnNcblxuJHRhYl9hY3RpdmVfY2w6XHRcdCRncmF5c2NhbGVfZGFya19jbDtcbiR0YWJfZGlzYWJsZV9jbDpcdCNhZGFhYTc7XG5cbiRuYXZfbGlua19wYWRkaW5nOiAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuJG5hdl9saW5rX2hvdmVyX2JnOiAgICAgICAgICAgICAgICAgICAgICAgICA7XG5cbiRuYXZfZGlzYWJsZWRfbGlua19jb2xvcjogICAgICAgICAgICAgICAgICAgO1xuJG5hdl9kaXNhYmxlZF9saW5rX2hvdmVyX2NvbG9yOiAgICAgICAgICAgICA7XG5cblxuXG5cbi8vPT0gSnVtYm90cm9uID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIyMgcGFkZGluZ3MgZm9yIHRoZSBzdXBlciBsYXJnZSBzY3JlZW4gbGlrZSBUVnMsXG5cblxuXG5cblxuXG4vLz09IEZvcm0gc3RhdGVzIGFuZCBmZWVkYmFjayBtZXNzYWdlcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjIERlZmluZSBjb2xvcnMgZm9yIGZvcm0gZmVlZGJhY2sgc3RhdGVzIGFuZCwgYnkgZGVmYXVsdCwgYWxlcnRzLlxuXG4kc3RhdGVfc3VjY2Vzc190ZXh0OiAgICAgICAgICAgICA7XG4kc3RhdGVfc3VjY2Vzc19iZzogICAgICAgICAgICAgICA7XG4kc3RhdGVfc3VjY2Vzc19ib3JkZXI6ICAgICAgICAgICA7XG5cbiRzdGF0ZV9pbmZvX3RleHQ6ICAgICAgICAgICAgICAgIDtcbiRzdGF0ZV9pbmZvX2JnOiAgICAgICAgICAgICAgICAgIDtcbiRzdGF0ZV9pbmZvX2JvcmRlcjogICAgICAgICAgICAgIDtcblxuJHN0YXRlX3dhcm5pbmdfdGV4dDogICAgICAgICAgICAgO1xuJHN0YXRlX3dhcm5pbmdfYmc6ICAgICAgICAgICAgICAgO1xuJHN0YXRlX3dhcm5pbmdfYm9yZGVyOiAgICAgICAgICAgO1xuXG4kc3RhdGVfZGFuZ2VyX3RleHQ6ICAgICAgICAgICAgICA7XG4kc3RhdGVfZGFuZ2VyX2JnOiAgICAgICAgICAgICAgICA7XG4kc3RhdGVfZGFuZ2VyX2JvcmRlcjogICAgICAgICAgICA7XG5cblxuXG5cblxuXG4vLz09IExhYmVscyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyMjIFxuXG4vLyoqIERlZmF1bHQgbGFiZWwgYmFja2dyb3VuZCBjb2xvclxuJGxhYmVsX2RlZmF1bHRfYmc6ICAgICAgICAgICAgO1xuLy8qKiBQcmltYXJ5IGxhYmVsIGJhY2tncm91bmQgY29sb3JcbiRsYWJlbF9wcmltYXJ5X2JnOiAgICAgICAgICAgIDtcbi8vKiogU3VjY2VzcyBsYWJlbCBiYWNrZ3JvdW5kIGNvbG9yXG4kbGFiZWxfc3VjY2Vzc19iZzogICAgICAgICAgICA7XG4vLyoqIEluZm8gbGFiZWwgYmFja2dyb3VuZCBjb2xvclxuJGxhYmVsX2luZm9fYmc6ICAgICAgICAgICAgICAgO1xuLy8qKiBXYXJuaW5nIGxhYmVsIGJhY2tncm91bmQgY29sb3JcbiRsYWJlbF93YXJuaW5nX2JnOiAgICAgICAgICAgIDtcbi8vKiogRGFuZ2VyIGxhYmVsIGJhY2tncm91bmQgY29sb3JcbiRsYWJlbF9kYW5nZXJfYmc6ICAgICAgICAgICAgIDtcblxuLy8qKiBEZWZhdWx0IGxhYmVsIHRleHQgY29sb3JcbiRsYWJlbF9jb2xvcjogICAgICAgICAgICAgICAgIDtcbi8vKiogRGVmYXVsdCB0ZXh0IGNvbG9yIG9mIGEgbGlua2VkIGxhYmVsXG4kbGFiZWxfbGlua19ob3Zlcl9jb2xvcjogICAgICA7XG5cblxuXG5cblxuLy8gMjgwNDE2IEphbmV0IEFkZCByb3VuZCBjb3JuZXJcbiRiYXNlX2JvcmRlcl9yYWRpdXM6NXB4O1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCJAaW1wb3J0IFwibWl4aW5zL19jbGVhcmZpeFwiO1xuQGltcG9ydCBcIm1peGlucy9fZ3JpZC1mcmFtZXdvcmtcIjtcbkBpbXBvcnQgXCJtaXhpbnMvX2dyaWRcIjtcbkBpbXBvcnQgXCJtaXhpbnMvX3Jlc3BvbnNpdmUuc2Nzc1wiO1xuQGltcG9ydCBcIm1peGlucy9fcHJlZml4LnNjc3NcIjsiLCIvLyBDbGVhcmZpeFxuLy9cbi8vIEZvciBtb2Rlcm4gYnJvd3NlcnNcbi8vIDEuIFRoZSBzcGFjZSBjb250ZW50IGlzIG9uZSB3YXkgdG8gYXZvaWQgYW4gT3BlcmEgYnVnIHdoZW4gdGhlXG4vLyAgICBjb250ZW50ZWRpdGFibGUgYXR0cmlidXRlIGlzIGluY2x1ZGVkIGFueXdoZXJlIGVsc2UgaW4gdGhlIGRvY3VtZW50LlxuLy8gICAgT3RoZXJ3aXNlIGl0IGNhdXNlcyBzcGFjZSB0byBhcHBlYXIgYXQgdGhlIHRvcCBhbmQgYm90dG9tIG9mIGVsZW1lbnRzXG4vLyAgICB0aGF0IGFyZSBjbGVhcmZpeGVkLlxuLy8gMi4gVGhlIHVzZSBvZiBgdGFibGVgIHJhdGhlciB0aGFuIGBibG9ja2AgaXMgb25seSBuZWNlc3NhcnkgaWYgdXNpbmdcbi8vICAgIGA6YmVmb3JlYCB0byBjb250YWluIHRoZSB0b3AtbWFyZ2lucyBvZiBjaGlsZCBlbGVtZW50cy5cbi8vXG4vLyBTb3VyY2U6IGh0dHA6Ly9uaWNvbGFzZ2FsbGFnaGVyLmNvbS9taWNyby1jbGVhcmZpeC1oYWNrL1xuXG5AbWl4aW4gY2xlYXJmaXgoKSB7XG4gICY6YmVmb3JlLFxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjsgLy8gMVxuICAgIGRpc3BsYXk6IHRhYmxlOyAvLyAyXG4gIH1cbiAgJjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7XG4gIH1cbn1cbiIsIi8vIEZyYW1ld29yayBncmlkIGdlbmVyYXRpb25cbi8vXG4vLyBVc2VkIG9ubHkgYnkgQm9vdHN0cmFwIHRvIGdlbmVyYXRlIHRoZSBjb3JyZWN0IG51bWJlciBvZiBncmlkIGNsYXNzZXMgZ2l2ZW5cbi8vIGFueSB2YWx1ZSBvZiBgJGdyaWQtY29sdW1uc2AuXG5cbi8vIFtjb252ZXJ0ZXJdIFRoaXMgaXMgZGVmaW5lZCByZWN1cnNpdmVseSBpbiBMRVNTLCBidXQgU2FzcyBzdXBwb3J0cyByZWFsIGxvb3BzXG5AbWl4aW4gbWFrZS1ncmlkLWNvbHVtbnMoJGk6IDEsICRsaXN0OiBcIi5jb2wteHMtI3skaX0sIC5jb2wtc20tI3skaX0sIC5jb2wtbWQtI3skaX0sIC5jb2wtbGctI3skaX1cIikge1xuICBAZm9yICRpIGZyb20gKDEgKyAxKSB0aHJvdWdoICRncmlkLWNvbHVtbnMge1xuICAgICRsaXN0OiBcIiN7JGxpc3R9LCAuY29sLXhzLSN7JGl9LCAuY29sLXNtLSN7JGl9LCAuY29sLW1kLSN7JGl9LCAuY29sLWxnLSN7JGl9XCI7XG4gIH1cbiAgI3skbGlzdH0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAvLyBQcmV2ZW50IGNvbHVtbnMgZnJvbSBjb2xsYXBzaW5nIHdoZW4gZW1wdHlcbiAgICBtaW4taGVpZ2h0OiAxcHg7XG4gICAgLy8gSW5uZXIgZ3V0dGVyIHZpYSBwYWRkaW5nXG4gICAgcGFkZGluZy1sZWZ0OiAgY2VpbCgoJGdyaWQtZ3V0dGVyLXdpZHRoIC8gMikpO1xuICAgIHBhZGRpbmctcmlnaHQ6IGZsb29yKCgkZ3JpZC1ndXR0ZXItd2lkdGggLyAyKSk7XG4gIH1cbn1cblxuXG4vLyBbY29udmVydGVyXSBUaGlzIGlzIGRlZmluZWQgcmVjdXJzaXZlbHkgaW4gTEVTUywgYnV0IFNhc3Mgc3VwcG9ydHMgcmVhbCBsb29wc1xuQG1peGluIGZsb2F0LWdyaWQtY29sdW1ucygkY2xhc3MsICRpOiAxLCAkbGlzdDogXCIuY29sLSN7JGNsYXNzfS0jeyRpfVwiKSB7XG4gIEBmb3IgJGkgZnJvbSAoMSArIDEpIHRocm91Z2ggJGdyaWQtY29sdW1ucyB7XG4gICAgJGxpc3Q6IFwiI3skbGlzdH0sIC5jb2wtI3skY2xhc3N9LSN7JGl9XCI7XG4gIH1cbiAgI3skbGlzdH0ge1xuICAgIGZsb2F0OiBsZWZ0O1xuICB9XG59XG5cblxuQG1peGluIGNhbGMtZ3JpZC1jb2x1bW4oJGluZGV4LCAkY2xhc3MsICR0eXBlKSB7XG4gIEBpZiAoJHR5cGUgPT0gd2lkdGgpIGFuZCAoJGluZGV4ID4gMCkge1xuICAgIC5jb2wtI3skY2xhc3N9LSN7JGluZGV4fSB7XG4gICAgICB3aWR0aDogcGVyY2VudGFnZSgoJGluZGV4IC8gJGdyaWQtY29sdW1ucykpO1xuICAgIH1cbiAgfVxuICBAaWYgKCR0eXBlID09IHB1c2gpIGFuZCAoJGluZGV4ID4gMCkge1xuICAgIC5jb2wtI3skY2xhc3N9LXB1c2gtI3skaW5kZXh9IHtcbiAgICAgIGxlZnQ6IHBlcmNlbnRhZ2UoKCRpbmRleCAvICRncmlkLWNvbHVtbnMpKTtcbiAgICB9XG4gIH1cbiAgQGlmICgkdHlwZSA9PSBwdXNoKSBhbmQgKCRpbmRleCA9PSAwKSB7XG4gICAgLmNvbC0jeyRjbGFzc30tcHVzaC0wIHtcbiAgICAgIGxlZnQ6IGF1dG87XG4gICAgfVxuICB9XG4gIEBpZiAoJHR5cGUgPT0gcHVsbCkgYW5kICgkaW5kZXggPiAwKSB7XG4gICAgLmNvbC0jeyRjbGFzc30tcHVsbC0jeyRpbmRleH0ge1xuICAgICAgcmlnaHQ6IHBlcmNlbnRhZ2UoKCRpbmRleCAvICRncmlkLWNvbHVtbnMpKTtcbiAgICB9XG4gIH1cbiAgQGlmICgkdHlwZSA9PSBwdWxsKSBhbmQgKCRpbmRleCA9PSAwKSB7XG4gICAgLmNvbC0jeyRjbGFzc30tcHVsbC0wIHtcbiAgICAgIHJpZ2h0OiBhdXRvO1xuICAgIH1cbiAgfVxuICBAaWYgKCR0eXBlID09IG9mZnNldCkge1xuICAgIC5jb2wtI3skY2xhc3N9LW9mZnNldC0jeyRpbmRleH0ge1xuICAgICAgbWFyZ2luLWxlZnQ6IHBlcmNlbnRhZ2UoKCRpbmRleCAvICRncmlkLWNvbHVtbnMpKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gW2NvbnZlcnRlcl0gVGhpcyBpcyBkZWZpbmVkIHJlY3Vyc2l2ZWx5IGluIExFU1MsIGJ1dCBTYXNzIHN1cHBvcnRzIHJlYWwgbG9vcHNcbkBtaXhpbiBsb29wLWdyaWQtY29sdW1ucygkY29sdW1ucywgJGNsYXNzLCAkdHlwZSkge1xuICBAZm9yICRpIGZyb20gMCB0aHJvdWdoICRjb2x1bW5zIHtcbiAgICBAaW5jbHVkZSBjYWxjLWdyaWQtY29sdW1uKCRpLCAkY2xhc3MsICR0eXBlKTtcbiAgfVxufVxuXG5cbi8vIENyZWF0ZSBncmlkIGZvciBzcGVjaWZpYyBjbGFzc1xuQG1peGluIG1ha2UtZ3JpZCgkY2xhc3MpIHtcbiAgQGluY2x1ZGUgZmxvYXQtZ3JpZC1jb2x1bW5zKCRjbGFzcyk7XG4gIEBpbmNsdWRlIGxvb3AtZ3JpZC1jb2x1bW5zKCRncmlkLWNvbHVtbnMsICRjbGFzcywgd2lkdGgpO1xuICBAaW5jbHVkZSBsb29wLWdyaWQtY29sdW1ucygkZ3JpZC1jb2x1bW5zLCAkY2xhc3MsIHB1bGwpO1xuICBAaW5jbHVkZSBsb29wLWdyaWQtY29sdW1ucygkZ3JpZC1jb2x1bW5zLCAkY2xhc3MsIHB1c2gpO1xuICBAaW5jbHVkZSBsb29wLWdyaWQtY29sdW1ucygkZ3JpZC1jb2x1bW5zLCAkY2xhc3MsIG9mZnNldCk7XG59XG4iLCIvLyBHcmlkIHN5c3RlbVxuLy9cbi8vIEdlbmVyYXRlIHNlbWFudGljIGdyaWQgY29sdW1ucyB3aXRoIHRoZXNlIG1peGlucy5cblxuLy8gQ2VudGVyZWQgY29udGFpbmVyIGVsZW1lbnRcbkBtaXhpbiBjb250YWluZXItZml4ZWQoJGd1dHRlcjogJGdyaWQtZ3V0dGVyLXdpZHRoKSB7XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIHBhZGRpbmctbGVmdDogIGZsb29yKCgkZ3V0dGVyIC8gMikpO1xuICBwYWRkaW5nLXJpZ2h0OiBjZWlsKCgkZ3V0dGVyIC8gMikpO1xuICBAaW5jbHVkZSBjbGVhcmZpeDtcbn1cblxuLy8gQ3JlYXRlcyBhIHdyYXBwZXIgZm9yIGEgc2VyaWVzIG9mIGNvbHVtbnNcbkBtaXhpbiBtYWtlLXJvdygkZ3V0dGVyOiAkZ3JpZC1ndXR0ZXItd2lkdGgpIHtcbiAgbWFyZ2luLWxlZnQ6ICBjZWlsKCgkZ3V0dGVyIC8gLTIpKTtcbiAgbWFyZ2luLXJpZ2h0OiBmbG9vcigoJGd1dHRlciAvIC0yKSk7XG4gIEBpbmNsdWRlIGNsZWFyZml4O1xufVxuXG4vLyBHZW5lcmF0ZSB0aGUgZXh0cmEgc21hbGwgY29sdW1uc1xuQG1peGluIG1ha2UteHMtY29sdW1uKCRjb2x1bW5zLCAkZ3V0dGVyOiAkZ3JpZC1ndXR0ZXItd2lkdGgpIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmctbGVmdDogICgkZ3V0dGVyIC8gMik7XG4gIHBhZGRpbmctcmlnaHQ6ICgkZ3V0dGVyIC8gMik7XG59XG5AbWl4aW4gbWFrZS14cy1jb2x1bW4tb2Zmc2V0KCRjb2x1bW5zKSB7XG4gIG1hcmdpbi1sZWZ0OiBwZXJjZW50YWdlKCgkY29sdW1ucyAvICRncmlkLWNvbHVtbnMpKTtcbn1cbkBtaXhpbiBtYWtlLXhzLWNvbHVtbi1wdXNoKCRjb2x1bW5zKSB7XG4gIGxlZnQ6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xufVxuQG1peGluIG1ha2UteHMtY29sdW1uLXB1bGwoJGNvbHVtbnMpIHtcbiAgcmlnaHQ6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xufVxuXG4vLyBHZW5lcmF0ZSB0aGUgc21hbGwgY29sdW1uc1xuQG1peGluIG1ha2Utc20tY29sdW1uKCRjb2x1bW5zLCAkZ3V0dGVyOiAkZ3JpZC1ndXR0ZXItd2lkdGgpIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtaW4taGVpZ2h0OiAxcHg7XG4gIHBhZGRpbmctbGVmdDogICgkZ3V0dGVyIC8gMik7XG4gIHBhZGRpbmctcmlnaHQ6ICgkZ3V0dGVyIC8gMik7XG5cbiAgQG1lZGlhIChtaW4td2lkdGg6ICRzY3JlZW4tc20tbWluKSB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgd2lkdGg6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xuICB9XG59XG5AbWl4aW4gbWFrZS1zbS1jb2x1bW4tb2Zmc2V0KCRjb2x1bW5zKSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLXNtLW1pbikge1xuICAgIG1hcmdpbi1sZWZ0OiBwZXJjZW50YWdlKCgkY29sdW1ucyAvICRncmlkLWNvbHVtbnMpKTtcbiAgfVxufVxuQG1peGluIG1ha2Utc20tY29sdW1uLXB1c2goJGNvbHVtbnMpIHtcbiAgQG1lZGlhIChtaW4td2lkdGg6ICRzY3JlZW4tc20tbWluKSB7XG4gICAgbGVmdDogcGVyY2VudGFnZSgoJGNvbHVtbnMgLyAkZ3JpZC1jb2x1bW5zKSk7XG4gIH1cbn1cbkBtaXhpbiBtYWtlLXNtLWNvbHVtbi1wdWxsKCRjb2x1bW5zKSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLXNtLW1pbikge1xuICAgIHJpZ2h0OiBwZXJjZW50YWdlKCgkY29sdW1ucyAvICRncmlkLWNvbHVtbnMpKTtcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSB0aGUgbWVkaXVtIGNvbHVtbnNcbkBtaXhpbiBtYWtlLW1kLWNvbHVtbigkY29sdW1ucywgJGd1dHRlcjogJGdyaWQtZ3V0dGVyLXdpZHRoKSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWluLWhlaWdodDogMXB4O1xuICBwYWRkaW5nLWxlZnQ6ICAoJGd1dHRlciAvIDIpO1xuICBwYWRkaW5nLXJpZ2h0OiAoJGd1dHRlciAvIDIpO1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLW1kLW1pbikge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIHdpZHRoOiBwZXJjZW50YWdlKCgkY29sdW1ucyAvICRncmlkLWNvbHVtbnMpKTtcbiAgfVxufVxuQG1peGluIG1ha2UtbWQtY29sdW1uLW9mZnNldCgkY29sdW1ucykge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJHNjcmVlbi1tZC1taW4pIHtcbiAgICBtYXJnaW4tbGVmdDogcGVyY2VudGFnZSgoJGNvbHVtbnMgLyAkZ3JpZC1jb2x1bW5zKSk7XG4gIH1cbn1cbkBtaXhpbiBtYWtlLW1kLWNvbHVtbi1wdXNoKCRjb2x1bW5zKSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLW1kLW1pbikge1xuICAgIGxlZnQ6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xuICB9XG59XG5AbWl4aW4gbWFrZS1tZC1jb2x1bW4tcHVsbCgkY29sdW1ucykge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJHNjcmVlbi1tZC1taW4pIHtcbiAgICByaWdodDogcGVyY2VudGFnZSgoJGNvbHVtbnMgLyAkZ3JpZC1jb2x1bW5zKSk7XG4gIH1cbn1cblxuLy8gR2VuZXJhdGUgdGhlIGxhcmdlIGNvbHVtbnNcbkBtaXhpbiBtYWtlLWxnLWNvbHVtbigkY29sdW1ucywgJGd1dHRlcjogJGdyaWQtZ3V0dGVyLXdpZHRoKSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWluLWhlaWdodDogMXB4O1xuICBwYWRkaW5nLWxlZnQ6ICAoJGd1dHRlciAvIDIpO1xuICBwYWRkaW5nLXJpZ2h0OiAoJGd1dHRlciAvIDIpO1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLWxnLW1pbikge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIHdpZHRoOiBwZXJjZW50YWdlKCgkY29sdW1ucyAvICRncmlkLWNvbHVtbnMpKTtcbiAgfVxufVxuQG1peGluIG1ha2UtbGctY29sdW1uLW9mZnNldCgkY29sdW1ucykge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJHNjcmVlbi1sZy1taW4pIHtcbiAgICBtYXJnaW4tbGVmdDogcGVyY2VudGFnZSgoJGNvbHVtbnMgLyAkZ3JpZC1jb2x1bW5zKSk7XG4gIH1cbn1cbkBtaXhpbiBtYWtlLWxnLWNvbHVtbi1wdXNoKCRjb2x1bW5zKSB7XG4gIEBtZWRpYSAobWluLXdpZHRoOiAkc2NyZWVuLWxnLW1pbikge1xuICAgIGxlZnQ6IHBlcmNlbnRhZ2UoKCRjb2x1bW5zIC8gJGdyaWQtY29sdW1ucykpO1xuICB9XG59XG5AbWl4aW4gbWFrZS1sZy1jb2x1bW4tcHVsbCgkY29sdW1ucykge1xuICBAbWVkaWEgKG1pbi13aWR0aDogJHNjcmVlbi1sZy1taW4pIHtcbiAgICByaWdodDogcGVyY2VudGFnZSgoJGNvbHVtbnMgLyAkZ3JpZC1jb2x1bW5zKSk7XG4gIH1cbn1cbiIsIi8vIEBtaXhpbiBpc194cyAoJGNvbnRlbnQpe1xuLy8gXHRAbWVkaWEgKG1heC13aWR0aCgkc2NyZWVuX3hzKSl7XG4vLyBcdFx0JGNvbnRlbnQ7XG4vLyBcdH1cbi8vIH1cbi8vIEBtaXhpbiBpc19zbSAoJGNvbnRlbnQpe1xuLy8gXHRAbWVkaWEgKG1pbi13aWR0aCgkc2NyZWVuX3NtKSl7XG4vLyBcdFx0JGNvbnRlbnQ7XG4vLyBcdH1cbi8vIH1cbi8vIEBtaXhpbiBpc19tZCAoJGNvbnRlbnQpe1xuLy8gXHRAbWVkaWEgKG1pbi13aWR0aCgkc2NyZWVuX21kKSl7XG4vLyBcdFx0JGNvbnRlbnQ7XG4vLyBcdH1cbi8vIH1cbi8vIEBtaXhpbiBpc19sZyAoJGNvbnRlbnQpe1xuLy8gXHRAbWVkaWEgKG1pbi13aWR0aCgkc2NyZWVuX2xnKSl7XG4vLyBcdFx0JGNvbnRlbnQ7XG4vLyBcdH1cbi8vIH0iLCIvLy8gTWl4aW4gdG8gcHJlZml4IHNldmVyYWwgcHJvcGVydGllcyBhdCBvbmNlXG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG4vLy8gQHBhcmFtIHtNYXB9ICRkZWNsYXJhdGlvbnMgLSBEZWNsYXJhdGlvbnMgdG8gcHJlZml4XG4vLy8gQHBhcmFtIHtMaXN0fSAkcHJlZml4ZXMgKCgpKSAtIExpc3Qgb2YgcHJlZml4ZXMgdG8gcHJpbnRcblxuQG1peGluIHByZWZpeCgkZGVjbGFyYXRpb25zLCAkcHJlZml4ZXM6ICgpKSB7XG4gIEBlYWNoICRwcm9wZXJ0eSwgJHZhbHVlIGluICRkZWNsYXJhdGlvbnMge1xuICAgIEBlYWNoICRwcmVmaXggaW4gJHByZWZpeGVzIHtcbiAgICAgICN7Jy0nICsgJHByZWZpeCArICctJyArICRwcm9wZXJ0eX06ICR2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBPdXRwdXQgc3RhbmRhcmQgbm9uLXByZWZpeGVkIGRlY2xhcmF0aW9uXG4gICAgI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gIH1cbn1cblxuIl0sIm1hcHBpbmdzIjoiQUFLQSxRQUFRLENBQUM7RUFFTCxTQUFTLEVDb0ZKLElBQUksR0QvRVo7RUFQRCxRQUFRLENBR0osRUFBRSxDQUFDO0lBQUMsU0FBUyxFQytFTCxJQUFJO0lEL0VhLFVBQVUsRUFBQyxNQUFPLEdBQUc7RUFIbEQsUUFBUSxDQUlKLEVBQUUsQ0FBQztJQUFDLFNBQVMsRUMrRU4sSUFBSTtJRC9FYSxVQUFVLEVBQUMsTUFBTyxHQUFHO0VBSmpELFFBQVEsQ0FLSixFQUFFLENBQUM7SUFBQyxTQUFTLEVDOEVOLElBQUk7SUQ5RWEsVUFBVSxFQUFDLE1BQU8sR0FBRztFQUxqRCxRQUFRLENBTUosQ0FBQyxDQUFDO0lBQUMsU0FBUyxFQ2dGUCxJQUFJLEdEaEZlOztBQUc1Qix1QkFBdUIsQ0FBQztFQUNaLE1BQU0sRUFBRSxLQUFNO0VBQ2QsS0FBSyxFQUFDLElBQUs7RUFFWCxVQUFVLEVBQUUsTUFBTztFQUNuQixRQUFRLEVBQUUsTUFBTztFQUNqQixRQUFRLEVBQUMsUUFBUyxHQWlCckI7RUF2QlQsdUJBQXVCLENBUVQsY0FBYyxDQUFDO0lBQ2IsV0FBVyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFJO0lBQzlCLE9BQU8sRUFBRSxHQUFJO0lBQ2IsUUFBUSxFQUFFLFFBQVM7SUFDbkIsTUFBTSxFQUFFLFdBQVk7SUFDcEIsT0FBTyxFQUFFLEtBQU0sR0FDbEI7RUFkYix1QkFBdUIsQ0FlVCxpQkFBaUIsQ0FBQztJQUNoQixPQUFPLEVBQUMsR0FBSTtJQUNaLFFBQVEsRUFBQyxRQUFTO0lBQ2xCLE1BQU0sRUFBQyxXQUFZO0lBQ25CLE9BQU8sRUFBRSxLQUFNO0lBQ2YsS0FBSyxFQUFFLHdCQUFJO0lBQ1gsV0FBVyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFJLEdBQ2pDOztBQUViLGNBQWMsQ0FBQztFQUNDLFFBQVEsRUFBRSxNQUFPO0VBQ2pCLFVBQVUsRUFBQyxLQUFNLEdBQ3BCOztBQU1iLHFCQUFxQixDQUFDO0VBQ2xCLFVBQVUsRUNSVSxPQUFPLEdEUzlCOztBQUNELHlCQUF5QixDQUFDO0VBQ3RCLFFBQVEsRUFBQyxRQUFTO0VBQ2xCLGFBQWEsRUFBQyxHQUFHLENBQUMsS0FBSyxDQ2pCTixPQUFPLEdEaUQzQjtFQWxDRCx5QkFBeUIsQ0FJckIsU0FBUyxDQUFDO0lBQ0YsUUFBUSxFQUFFLFFBQVM7SUFDbkIsT0FBTyxFQUFDLEdBQUk7SUFDWixJQUFJLEVBQUMsQ0FBRTtJQUNQLEdBQUcsRUFBQyxLQUFNO0lBQ1YsU0FBUyxFQUFFLElBQUs7SUFDaEIsV0FBVyxFQUFFLElBQUssR0FNckI7SUFoQlQseUJBQXlCLENBSXJCLFNBQVMsQ0FPQyxlQUFlLEFBQUEsT0FBTyxDQUFDO01BQ3JCLFFBQVEsRUFBRSxRQUFTO01BQ25CLFNBQVMsRUFBRSxJQUFLO01BQ2hCLEdBQUcsRUFBRSxHQUFJLEdBQ1o7RUFmYix5QkFBeUIsQ0FrQm5CLGVBQWUsQ0FBQztJQUNOLFFBQVEsRUFBRSxRQUFTO0lBQ25CLFdBQVcsRUFBRSxLQUFNO0lBQ25CLEdBQUcsRUFBQyxLQUFNO0lBQ1YsSUFBSSxFQUFDLEdBQUk7SUFDVCxLQUFLLEVBQUUsS0FBTTtJQUNiLE1BQU0sRUFBRSxLQUFNO0lBQ2QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENDbkNULE9BQU87SURvQ2YsVUFBVSxFQUFFLFVBQVcsR0FPMUI7SUFqQ2IseUJBQXlCLENBa0JuQixlQUFlLENBU0gsR0FBRyxDQUFDO01BQ0YsS0FBSyxFQUFFLElBQUs7TUFDWixNQUFNLEVBQUUsSUFBSztNQUNiLFVBQVUsRUFBRSxLQUFNLEdBQ3JCOztBQU1qQiw0QkFBNEIsQ0FDeEIsRUFBRSxDQUFDO0VBQ0MsU0FBUyxFQUFFLElBQUs7RUFDaEIsS0FBSyxFQzFERCxPQUFPLEdEMkRYOztBQUpSLDRCQUE0QixDQUt4QixTQUFTLENBQUM7RUFDVixPQUFPLEVBQUUsWUFBYTtFQUN0QixVQUFVLEVBQUUsSUFBSyxHQUNoQjs7QUFFTCxzQkFBc0IsQ0FBQztFQUNuQixLQUFLLEVBQUMsSUFBSztFQUNYLE9BQU8sRUFBQyxLQUFNO0VBQ2QsY0FBYyxFQUFFLE1BQU8sR0FDMUI7O0FBQ0QsWUFBWSxDQUNSLElBQUksQ0FBQztFQUNELGdCQUFnQixFQ2pFUixPQUFPLEdEa0VsQjs7QUFNTCxxQkFBcUIsQ0FBQztFQUNsQixVQUFVLEVDMUVFLE9BQU87RUQyRW5CLFNBQVMsRUN0QkosSUFBSSxHRHdCWjs7QUFDRCxpQkFBaUIsQUFDWixhQUFhLENBQUM7RUFDWCxjQUFjLEVDMEJaLElBQUksR0R6QlQ7O0FBR0wsOEJBQThCLENBQUM7RUFDM0IsTUFBTSxFQUFFLEtBQU07RUFDZCxRQUFRLEVBQUMsUUFBUyxHQUVyQiIsIm5hbWVzIjpbXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
