.container {
  -webkit-background: url("../../img/logo_background.jpg") no-repeat;
  -moz-background: url("../../img/logo_background.jpg") no-repeat;
  background: url("../../img/logo_background.jpg") no-repeat;
  -webkit-background-position: center bottom;
  -moz-background-position: center bottom;
  background-position: center bottom;
  -webkit-background-size: 100% auto;
  -moz-background-size: 100% auto;
  background-size: 100% auto;
  height: 100vh; }

.brand_container {
  width: 48%;
  min-width: 300px;
  padding: 50px 0px;
  margin-left: auto;
  margin-right: auto;
  text-align: center; }
  .brand_container img {
    width: 100%;
    max-width: 187px;
    min-width: 130px;
    height: auto;
    display: block;
    margin-left: auto;
    margin-right: auto; }

.container #login_form {
  padding-top: 50px;
  text-align: center; }
  .container #login_form .input_single {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 20px; }
    .container #login_form .input_single input::-webkit-input-placeholder, .container #login_form .input_single input:-ms-input-placeholder {
      color: #4B4B4B; }
  .container #login_form .btn {
    margin-left: auto;
    margin-right: auto; }
  .container #login_form .forget_pwd {
    display: none;
    width: 300px;
    margin-top: 20px;
    margin-left: 28%;
    text-align: left;
    font-size: 14px; }

/*# sourceMappingURL=data:application/json;base64, */
